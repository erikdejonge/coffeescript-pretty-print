// Generated by CoffeeScript 1.7.0
"use strict";
var BrowserDetect, asciistring, asciistring_lowercase, asciistring_lowercase_nospace, asciistring_no_specials, async_call, async_call_retries, b64_decode_safe, b64_encode_safe, b64_object_safe, b64_uri, b64safe, base64_decode, base64_encode, binTable, bool_parse, chrTable, decode_utf8_b64, directive_check_slow_timeout, directive_check_timeout, emit_event, encode_utf8_b64, endswith, exist, exist_string, exist_truth, g_format_file_size, g_http_error, g_replace_all, g_running_local, get_guid, get_local_time, get_s4_num, get_version, ignore, init_cryptobox, ismobile, j2o, list_contains, list_contains_slow, o2j, object_b64_safe, once_cb_init, other_with, padding, param_unused, pass, pg, pluck_exception, print, r_retrieve_kvs, running_local, safe_b64, start_time, startswith, strcmp, string_contains, translate, unique_number, uri_b64, utf8Decode, utf8Encode, warning, _splitlast,
  __slice = [].slice,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

g_running_local = null;

directive_check_timeout = 1000;

directive_check_slow_timeout = 1000;

window.base64 = {};

window.base64.PADCHAR = " = ";

window.base64.ALPHA = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789 + /";

ignore = function(v) {
  return v;
};

translate = function(k) {
  return k;
};

o2j = function(obj) {
  return JSON.stringify(obj);
};

j2o = function(json) {
  return JSON.parse(json);
};

pluck_exception = function(error) {
  var line, loc, message;
  loc = error.sourceURL || error.fileName;
  line = error.lineNumber || error.line;
  message = String(error);
  return [loc, line, message];
};

_splitlast = function(str, splitter) {
  var s, sp;
  s = String(str);
  sp = s.split(splitter);
  return sp[_.size(sp) - 1];
};

g_replace_all = function(str, v1, v2) {
  var newstr;
  newstr = str;
  while (newstr.indexOf(v1) !== -1) {
    newstr = newstr.replace(v1, v2);
  }
  return newstr;
};

exist_string = function(value) {
  if (value == null) {
    return false;
  } else {
    switch (value) {
      case void 0:
      case null:
      case "null":
      case "undefined":
        return false;
      default:
        return true;
    }
  }
};

exist = function(value) {
  if (_.isArray(value)) {
    if (_.size(value) === 0) {
      return false;
    }
  }
  if (exist_string(value)) {
    if (value === "") {
      return false;
    }
    if (String(value) === "NaN") {
      return false;
    }
    if (String(value) === "undefined") {
      return false;
    }
    if (value.trim != null) {
      if (value.trim() === "") {
        return false;
      }
    }
    return true;
  } else {
    return false;
  }
};

pg = function(v) {
  var print_key;
  if (exist(v)) {
    if (exist(window.globals[v])) {
      if (typeof console !== "undefined" && console !== null) {
        console.log(v, window.globals[v]);
      }
    } else {
      print_key = function(k) {
        if (String(k).toLowerCase().indexOf(v.toLowerCase()) >= 0) {
          if (typeof console !== "undefined" && console !== null) {
            console.log(v, "->", k, " -> ", window.globals[k]);
          }
        }
        if (String(window.globals[k]).toLowerCase().indexOf(v.toLowerCase()) >= 0) {
          return typeof console !== "undefined" && console !== null ? console.log(v, "->", k, " -> ", window.globals[k]) : void 0;
        }
      };
      _.each(_.keys(window.globals), print_key);
    }
  } else {
    print_key = function(k) {
      return typeof console !== "undefined" && console !== null ? console.log(k, window.globals[k]) : void 0;
    };
    _.each(_.keys(window.globals), print_key);
  }
  return "";
};

param_unused = function(param) {
  return param;
};

string_contains = function(astring, val) {
  return String(astring).indexOf(val) !== -1;
};

startswith = function(astring, val) {
  return String(astring).indexOf(val) === 0;
};

endswith = function(astring, val) {
  return astring.indexOf(val, astring.length - val.length) !== -1;
};

async_call = function(func) {
  return _.delay(func, directive_check_timeout);
};

r_retrieve_kvs = function(o, l_kvs) {
  var item, k, _i, _len, _results;
  _results = [];
  for (_i = 0, _len = o.length; _i < _len; _i++) {
    item = o[_i];
    if (_.isArray(item)) {
      _results.push(r_retrieve_kvs(item, l_kvs));
    } else {
      _results.push((function() {
        var _j, _len1, _ref, _results1;
        _ref = _.keys(item);
        _results1 = [];
        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
          k = _ref[_j];
          if (_.isObject(item[k])) {
            _results1.push(r_retrieve_kvs([item[k]], l_kvs));
          } else {
            if (!exist(l_kvs[k])) {
              l_kvs[k] = [];
            }
            _results1.push(l_kvs[k].push(item[k]));
          }
        }
        return _results1;
      })());
    }
  }
  return _results;
};

list_contains_slow = function(alist, val) {
  var contains, i, i2, item, k, k2, kvs, kvsv, v, v2, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _len5, _len6, _m, _n, _o, _ref, _ref1, _ref2, _ref3;
  contains = false;
  item = null;
  if (!_.isArray(alist)) {
    return contains = false;
  } else {
    for (_i = 0, _len = alist.length; _i < _len; _i++) {
      i = alist[_i];
      if (_.isString(i)) {
        contains = strcmp(i, val);
      } else if (_.isNumber(i)) {
        contains = i === val;
      } else {
        if (_.isArray(val)) {
          for (_j = 0, _len1 = val.length; _j < _len1; _j++) {
            i2 = val[_j];
            contains = strcmp(o2j(i), o2j(i2));
          }
        } else {
          contains = strcmp(o2j(i), o2j(val));
        }
      }
      if (contains === true) {
        return [true, i];
      }
    }
    if (contains === false) {
      for (_k = 0, _len2 = alist.length; _k < _len2; _k++) {
        i = alist[_k];
        item = i;
        if (_.isObject(i)) {
          kvs = {};
          kvsv = {};
          r_retrieve_kvs([i], kvs);
          if (_.isObject(val)) {
            r_retrieve_kvs([val], kvsv);
          } else {
            kvsv['scalar'] = val;
          }
          _ref = _.keys(kvs);
          for (_l = 0, _len3 = _ref.length; _l < _len3; _l++) {
            k = _ref[_l];
            _ref1 = _.keys(kvsv);
            for (_m = 0, _len4 = _ref1.length; _m < _len4; _m++) {
              k2 = _ref1[_m];
              _ref2 = kvs[k];
              for (_n = 0, _len5 = _ref2.length; _n < _len5; _n++) {
                v = _ref2[_n];
                contains = strcmp(o2j(v), o2j(val));
                if (!contains) {
                  _ref3 = kvsv[k2];
                  for (_o = 0, _len6 = _ref3.length; _o < _len6; _o++) {
                    v2 = _ref3[_o];
                    contains = strcmp(o2j(v2), o2j(val));
                  }
                }
                if (contains) {
                  return [true, item];
                }
              }
            }
          }
        }
      }
    }
    return [false, null];
  }
};

list_contains = function(alist, val) {
  var check_vals, contains, item;
  contains = false;
  item = null;
  if (!_.isArray(alist)) {
    return contains = false;
  } else {
    check_vals = function(i) {
      var i2, _i, _len;
      if (contains) {
        return;
      }
      if (_.isString(i)) {
        contains = i === val;
      } else if (_.isNumber(i)) {
        contains = i === val;
      } else if (_.isArray(val)) {
        for (_i = 0, _len = val.length; _i < _len; _i++) {
          i2 = val[_i];
          contains = i === i2;
        }
      } else {
        contains = i === val;
      }
      if (contains === true) {
        return item = i;
      }
    };
    _.each(alist, check_vals);
    if (contains) {
      return [contains, item];
    } else {
      check_vals = function(i) {
        var check_keys, kvs, kvsv;
        if (_.isObject(i)) {
          kvs = {};
          kvsv = {};
          r_retrieve_kvs([i], kvs);
          if (_.isObject(val)) {
            r_retrieve_kvs([val], kvsv);
          } else {
            kvsv['scalar'] = val;
          }
          check_keys = function(k) {
            var check_keys2;
            check_keys2 = function(k2) {
              var check_v;
              check_v = function(v) {
                var v2, _i, _len, _ref;
                if (contains) {

                } else {
                  contains = v === val;
                  if (contains) {
                    if (!exist(item)) {
                      item = i;
                    }
                    return;
                  }
                  _ref = kvsv[k2];
                  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                    v2 = _ref[_i];
                    contains = v2 === val;
                    if (contains) {
                      if (!exist(item)) {
                        item = i;
                      }
                      return;
                    }
                  }
                }
              };
              return _.each(kvs[k], check_v);
            };
            return _.each(_.keys(kvsv), check_keys2);
          };
          return _.each(_.keys(kvs), check_keys);
        }
      };
      _.each(alist, check_vals);
    }
    return [contains, item];
  }
};

padding = '=';

chrTable = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';

binTable = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, 0, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1, -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -1, -1, -1, -1, -1];

utf8Encode = function(str) {
  var length, mybytes, mychar, offset;
  mybytes = [];
  offset = 0;
  mychar = void 0;
  str = encodeURI(str);
  length = str.length;
  while (offset < length) {
    mychar = str[offset];
    offset += 1;
    if ("%" === mychar) {
      mychar = str[offset] + str[offset + 1];
      mybytes.push(parseInt(mychar, 16));
      offset += 2;
    } else {
      mybytes.push(mychar.charCodeAt(0));
    }
  }
  return mybytes;
};

utf8Decode = function(mybytes) {
  var c, c2, c3, chars, length, offset;
  chars = [];
  offset = 0;
  length = mybytes.length;
  c = void 0;
  c2 = void 0;
  c3 = void 0;
  while (offset < length) {
    c = mybytes[offset];
    c2 = mybytes[offset + 1];
    c3 = mybytes[offset + 2];
    if (128 > c) {
      chars.push(String.fromCharCode(c));
      offset += 1;
    } else if (191 < c && c < 224) {
      chars.push(String.fromCharCode(((c & 31) << 6) | (c2 & 63)));
      offset += 2;
    } else {
      chars.push(String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63)));
      offset += 3;
    }
  }
  return chars.join("");
};

encode_utf8_b64 = function(str) {
  var i, length, mybytes, result;
  result = "";
  mybytes = utf8Encode(str);
  length = mybytes.length;
  i = 0;
  while (i < (length - 2)) {
    result += chrTable[mybytes[i] >> 2];
    result += chrTable[((mybytes[i] & 0x03) << 4) + (mybytes[i + 1] >> 4)];
    result += chrTable[((mybytes[i + 1] & 0x0f) << 2) + (mybytes[i + 2] >> 6)];
    result += chrTable[mybytes[i + 2] & 0x3f];
    i += 3;
  }
  if (length % 3) {
    i = length - (length % 3);
    result += chrTable[mybytes[i] >> 2];
    if ((length % 3) === 2) {
      result += chrTable[((mybytes[i] & 0x03) << 4) + (mybytes[i + 1] >> 4)];
      result += chrTable[(mybytes[i + 1] & 0x0f) << 2];
      result += padding;
    } else {
      result += chrTable[(mybytes[i] & 0x03) << 4];
      result += padding + padding;
    }
  }
  return result;
};

decode_utf8_b64 = function(data) {
  var code, idx, leftbits, leftdata, mybytes, value;
  value = void 0;
  code = void 0;
  mybytes = [];
  leftbits = 0;
  leftdata = 0;
  idx = 0;
  while (idx < data.length) {
    code = data.charCodeAt(idx);
    value = binTable[code & 0x7F];
    if (-1 === value) {
      log("WARN: Illegal characters (code=" + code + ") in position " + idx);
    } else {
      leftdata = (leftdata << 6) | value;
      leftbits += 6;
      if (leftbits >= 8) {
        leftbits -= 8;
        if (padding !== data.charAt(idx)) {
          mybytes.push((leftdata >> leftbits) & 0xFF);
        }
        leftdata &= (1 << leftbits) - 1;
      }
    }
    idx++;
  }
  if (leftbits) {
    log("ERROR: Corrupted base64 string");
    return null;
  }
  return utf8Decode(mybytes);
};

if (window.btoa == null) {
  base64_encode = window.base64.encode;
} else {
  base64_encode = window.btoa;
}

if (window.atob == null) {
  base64_decode = window.base64.decode;
} else {
  base64_decode = window.atob;
}

if (!String.prototype.trim) {
  String.prototype.trim = function() {
    return this.replace(/^\s+|\s+$/g, "");
  };
}

String.prototype.startsWith = function(suffix) {
  return this.indexOf(suffix) === 0;
};

String.prototype.endsWith = function(suffix) {
  return this.indexOf(suffix, this.length - suffix.length) !== -1;
};

String.prototype.contains = function(substr) {
  return this.indexOf(substr) !== -1;
};

Array.prototype.remove = function(from, to) {
  var rest;
  rest = this.slice((to || from) + 1 || this.length);
  this.length = (from < 0 ? this.length + from : from);
  return this.push.apply(this, rest);
};

uri_b64 = function(s) {
  s = encodeURI(s);
  return base64_encode(s);
};

safe_b64 = function(s) {
  s = encodeURI(s);
  s = base64_encode(s);
  return s;
};

strcmp = function(s1, s2) {
  if (!exist_string(s1)) {
    return false;
  }
  if (!exist_string(s2)) {
    return false;
  }
  if (exist(s1.trim)) {
    s1 = s1.trim();
  }
  if (exist(s2.trim)) {
    s2 = s2.trim();
  }
  return s1 === s2;
};

exist_truth = function(value) {
  if (exist(value)) {
    switch (value) {
      case "0":
      case 0:
        return false;
      case "1":
      case 1:
        return true;
      case "false":
      case false:
        return false;
      case "true":
      case true:
        return true;
      default:
        warning("app_basic.cf:453", "exist_truth neither true or false", value);
        return false;
    }
  } else {
    return false;
  }
};

b64safe = "data:b64:safe,";

b64_encode_safe = function(s) {
  if (!exist(s)) {
    return s;
  }
  if (!exist(s.indexOf)) {
    return s;
  }
  if (s.indexOf(b64safe) === 0) {
    return s;
  }
  s = encodeURIComponent(s);
  s = base64_encode(s);
  s = s.replace(/\=/g, "-");
  return b64safe + s;
};

b64_decode_safe = function(s) {
  var error;
  if (!exist(s)) {
    return s;
  }
  if (!exist(s.indexOf)) {
    return s;
  }
  if (s.indexOf(b64safe) !== 0) {
    return s;
  }
  s = s.replace(b64safe, "");
  s = s.replace(/-/g, "=");
  s = base64_decode(s);
  try {
    s = decodeURIComponent(s);
  } catch (_error) {
    error = _error;
    s = "error decoding";
  }
  return s;
};

object_b64_safe = function(v) {
  var set_var;
  set_var = function(k) {
    return v[k] = object_b64_safe(v[k]);
  };
  if (_.isObject(v)) {
    _.each(_.keys(v), set_var);
    return v;
  } else {
    v = b64_encode_safe(v);
    return v;
  }
};

b64_object_safe = function(v) {
  var set_var;
  set_var = function(k) {
    return v[k] = b64_object_safe(v[k]);
  };
  if (_.isObject(v)) {
    _.each(_.keys(v), set_var);
    return v;
  } else {
    v = b64_decode_safe(v);
    return v;
  }
};

b64_uri = function(s) {
  s = base64_decode(s);
  return decodeURI(s);
};

pass = function() {
  return true;
};

asciistring = function(s) {
  var ns, testchar;
  ns = "";
  testchar = function(c) {
    var code;
    code = c.charCodeAt(0);
    switch (true) {
      case code >= 48 && code <= 57:
        return ns += c;
      case code >= 65 && code <= 90:
        return ns += c;
      case code >= 97 && code <= 122:
        return ns += c;
      case code === 32:
        return ns += c;
      case code === 45:
        return ns += c;
      case code === 38:
        return ns += c;
      case code === 47:
        return ns += c;
      case code === 46:
        return ns += c;
      case code === 43:
        return ns += c;
      case code === 8364:
        return ns += "€";
      default:
        return pass;
    }
  };
  _.each(s, testchar);
  return ns;
};

asciistring_no_specials = function(s) {
  var ns, testchar;
  ns = "";
  testchar = function(c) {
    var code;
    code = c.charCodeAt(0);
    switch (true) {
      case code >= 48 && code <= 57:
        return ns += c;
      case code >= 65 && code <= 90:
        return ns += c;
      case code >= 97 && code <= 122:
        return ns += c;
      case code === 32:
        return ns += c;
      case code === 45:
        return ns += c;
      case code === 38:
        return ns += c;
      case code === 43:
        return ns += c;
      case code === 214:
        return ns += "O";
      case code === 246:
        return ns += "o";
      case code === 47:
        return ns += c;
      case code === 8364:
        return ns += "EUR ";
      default:
        return ns += "";
    }
  };
  _.each(s, testchar);
  if (ns == null) {
    return "";
  } else {
    return ns;
  }
};

asciistring_lowercase = function(s) {
  s = s.toLowerCase();
  return asciistring(s);
};

asciistring_lowercase_nospace = function(s) {
  var ns, stripspace;
  s = asciistring_no_specials(s);
  ns = "";
  stripspace = function(i) {
    if (i !== ' ') {
      return ns += i;
    }
  };
  _.each(s, stripspace);
  return ns;
};

g_format_file_size = function(mybytes) {
  if (mybytes === 0) {
    return "-";
  }
  if (typeof mybytes !== "number") {
    mybytes = parseFloat(mybytes);
  }
  if (mybytes >= Math.pow(2, 40)) {
    return (mybytes / Math.pow(2, 40)).toFixed(2) + " tb";
  }
  if (mybytes >= Math.pow(2, 30)) {
    return (mybytes / Math.pow(2, 30)).toFixed(2) + " gb";
  }
  if (mybytes >= Math.pow(2, 20)) {
    return (mybytes / Math.pow(2, 20)).toFixed(2) + " mb";
  }
  if (mybytes >= Math.pow(2, 10)) {
    return (mybytes / Math.pow(2, 10)).toFixed(2) + " kb";
  }
  return mybytes.toFixed(0) + " b.";
};

get_s4_num = function() {
  var num;
  num = Math.floor(Math.random() * 0x10000).toString(16);
  return num;
};

get_guid = function() {
  return get_s4_num() + get_s4_num() + "-" + get_s4_num() + "-" + get_s4_num() + "-" + get_s4_num() + "-" + get_s4_num() + get_s4_num() + get_s4_num();
};

get_local_time = function() {
  var t;
  t = new Date().getTime() / 1000;
  if (exist(window.globals)) {
    if (exist(window.globals["g_corrected_servertime"])) {
      t = window.globals["g_corrected_servertime"];
    }
  }
  return t;
};

get_version = function() {
  return "$$unique_id$$";
};

unique_number = function() {
  if (running_local()) {
    return new Date().getTime();
  } else {
    return get_version();
  }
};

window.cvar_show_debug_info = false;

other_with = {};

window.g_logfile = [];

start_time = get_local_time();

print = function() {
  var cnt, coffee2cf, create_print_string, found_object, loop_others, msg, num_objects, obj, others, print_str, shortdate, spaces, _base, _base1, _base2, _base3;
  msg = arguments[0], others = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
  if (exist(window.globals) && (__indexOf.call(_.keys(window.globals), "g_browser") >= 0) && (window.globals["g_browser"].browser === 'Chrome')) {
    switch (_.size(others)) {
      case 0:
        if (typeof console !== "undefined" && console !== null) {
          console.log("%c" + msg, 'color: crimson', others);
        }
        break;
      case 1:
        if (typeof console !== "undefined" && console !== null) {
          console.log("%c" + msg, 'color: crimson', others[0]);
        }
        break;
      case 2:
        if ((typeof (_base = String(others[0])).indexOf === "function" ? _base.indexOf(".cf") : void 0) > 0) {
          if (typeof console !== "undefined" && console !== null) {
            console.log("%c" + msg + " " + others[0], 'color: crimson', others[1]);
          }
        } else {
          if (typeof console !== "undefined" && console !== null) {
            console.log("%c" + msg, 'color: crimson', others[0], others[1]);
          }
        }
        break;
      case 3:
        if ((typeof (_base1 = String(others[0])).indexOf === "function" ? _base1.indexOf(".cf") : void 0) > 0) {
          if (typeof console !== "undefined" && console !== null) {
            console.log("%c" + msg + " " + others[0], 'color: crimson', others[1], others[2]);
          }
        } else {
          if (typeof console !== "undefined" && console !== null) {
            console.log("%c" + msg, 'color: crimson', others[0], others[1], others[2]);
          }
        }
        break;
      case 4:
        if ((typeof (_base2 = String(others[0])).indexOf === "function" ? _base2.indexOf(".cf") : void 0) > 0) {
          if (typeof console !== "undefined" && console !== null) {
            console.log("%c" + msg + " " + others[0], 'color: crimson', others[1], others[2], others[3]);
          }
        } else {
          if (typeof console !== "undefined" && console !== null) {
            console.log("%c" + msg, 'color: crimson', others[0], others[1], others[2], others[3]);
          }
        }
        break;
      case 5:
        if ((typeof (_base3 = String(others[0])).indexOf === "function" ? _base3.indexOf(".cf") : void 0) > 0) {
          if (typeof console !== "undefined" && console !== null) {
            console.log("%c" + msg + " " + others[0], 'color: crimson', others[1], others[2], others[3], others[4]);
          }
        } else {
          if (typeof console !== "undefined" && console !== null) {
            console.log("%c" + msg, 'color: crimson', others[0], others[1], others[2], others[3], others[4]);
          }
        }
        break;
      default:
        if (typeof console !== "undefined" && console !== null) {
          console.log(others, msg);
        }
    }
  } else {
    switch (_.size(others)) {
      case 0:
        if (typeof console !== "undefined" && console !== null) {
          console.log(msg);
        }
        break;
      case 1:
        if (typeof console !== "undefined" && console !== null) {
          console.log(msg, others[0]);
        }
        break;
      case 2:
        if (typeof console !== "undefined" && console !== null) {
          console.log(msg, others[0], others[1]);
        }
        break;
      case 3:
        if (typeof console !== "undefined" && console !== null) {
          console.log(msg, others[0], others[1], others[2]);
        }
        break;
      case 4:
        if (typeof console !== "undefined" && console !== null) {
          console.log(msg, others[0], others[1], others[2], others[3]);
        }
        break;
      case 5:
        if (typeof console !== "undefined" && console !== null) {
          console.log(msg, others[0], others[1], others[2], others[3], others[4]);
        }
        break;
      default:
        if (typeof console !== "undefined" && console !== null) {
          console.log(others, msg);
        }
    }
  }
  if (!exist_truth(window.cvar_show_debug_info)) {
    return;
  }
  if (msg.replace != null) {
    shortdate = "" + (get_local_time() - start_time) / 1000;
    while (shortdate.length < 6) {
      shortdate += " ";
    }
    shortdate += " ";
    while (msg.length < 22) {
      msg += " ";
    }
    msg = shortdate + msg;
    coffee2cf = function(obj) {
      if (obj != null) {
        if (obj.replace != null) {
          return obj.replace(".cf", ".cf");
        }
      }
      return obj;
    };
    others = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = others.length; _i < _len; _i++) {
        obj = others[_i];
        _results.push(coffee2cf(obj));
      }
      return _results;
    })();
    if (others == null) {
      window.g_logfile.push(msg + " " + String(others));
    } else {
      cnt = 0;
      loop_others = function(i) {
        var l;
        if (exist(i)) {
          l = i.length;
        } else {
          l = "undefined".length;
        }
        if (other_with[cnt] == null) {
          other_with[cnt] = l + 2;
        } else {
          if (other_with[cnt] < l) {
            other_with[cnt] = l + 2;
          }
        }
        return cnt += 1;
      };
      _.each(others, loop_others);
      print_str = "";
      cnt = 0;
      spaces = function(n) {
        var c, s;
        c = 0;
        s = " ";
        while (c < n) {
          s += " ";
          c += 1;
        }
        return s;
      };
      found_object = -1;
      num_objects = 0;
      create_print_string = function(s) {
        if (_.isObject(s)) {
          found_object = cnt;
          num_objects += 1;
        } else {
          if (exist(s)) {
            print_str += s + spaces(other_with[cnt] - s.length);
          } else {
            print_str += s + " ";
          }
        }
        return cnt += 1;
      };
      _.each(others, create_print_string);
      if (found_object === -1) {
        window.g_logfile.push(msg + " " + print_str);
      } else {
        if (num_objects > 1) {
          window.g_logfile.push(msg);
        } else {
          window.g_logfile.push(msg + " " + print_str + " " + others[found_object]);
        }
      }
    }
    window.g_logfile = window.g_logfile.slice(_.size(window.g_logfile) - 150);
    return 1;
  }
};

warning = function() {
  var msg, others;
  msg = arguments[0], others = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
  if (typeof console !== "undefined" && console !== null) {
    console.log('%c------ important ' + msg + ' ---------', 'color: red');
  }
  switch (_.size(others)) {
    case 0:
      if (typeof console !== "undefined" && console !== null) {
        console.log(others);
      }
      break;
    case 1:
      if (typeof console !== "undefined" && console !== null) {
        console.log(others[0], "\t\t");
      }
      break;
    case 2:
      if (typeof console !== "undefined" && console !== null) {
        console.log(others[0], others[1], "\t\t");
      }
      break;
    case 3:
      if (typeof console !== "undefined" && console !== null) {
        console.log(others[0], others[1], others[2], "\t\t");
      }
      break;
    case 4:
      if (typeof console !== "undefined" && console !== null) {
        console.log(others[0], others[1], others[2], others[3], "\t\t");
      }
      break;
    default:
      if (typeof console !== "undefined" && console !== null) {
        console.log(others);
      }
  }
  if (exist(console.trace)) {
    if (typeof console !== "undefined" && console !== null) {
      console.trace();
    }
  }
  return typeof console !== "undefined" && console !== null ? console.log('%c------------------------------------------------', 'color: red') : void 0;
};

async_call_retries = function(msg, func, retries, max_retries) {
  if (!exist(max_retries)) {
    max_retries = 200;
  }
  if (retries > max_retries) {
    if (retries % 20 === 0) {
      print("app_basic.cf:838", "giving up", msg, "async_call_retries", retries);
    }
    return;
  }
  if (retries > 150) {
    print("app_basic.cf:842", msg, "async_call_retries", retries);
  }
  if (retries > 150) {
    return _.delay(func, directive_check_slow_timeout);
  } else {
    return _.delay(func, directive_check_timeout);
  }
};

running_local = function() {
  var path_split;
  if (window.g_running_local == null) {
    path_split = document.location.hostname;
    if (path_split === "127.0.0.1" || path_split === "192.168.14.107") {
      print("app_basic.cf:855", "running local");
      return window.g_running_local = true;
    } else {
      return window.g_running_local = false;
    }
  } else {
    return window.g_running_local;
  }
};

g_http_error = function(data) {
  var traceback, tracebacks;
  if (data.indexOf == null) {
    if (data.data != null) {
      if (data.data.indexOf != null) {
        data = data.data;
      }
    }
  }
  if (data.indexOf == null) {
    traceback = data;
    window.g_logfile.push(traceback);
    print("app_basic.cf:872", data);
  } else {
    tracebacks = String(data.slice(data.indexOf('<div id="pastebinTraceback" class="pastebin">'), _.size(data)));
    tracebacks = String(tracebacks.slice(tracebacks.indexOf('Traceback:'), _.size(tracebacks)));
    tracebacks = String(tracebacks.slice(0, tracebacks.indexOf('</textarea>')));
    tracebacks = "\n" + tracebacks.trim();
    tracebacks = g_replace_all(tracebacks, "&#39;", " * ");
    if (exist(tracebacks)) {
      warning("app_basic.cf:881", " **  django error  ** ", tracebacks);
      window.g_logfile.push(tracebacks);
    }
  }
  return traceback;
};

ismobile = function() {
  if (navigator.userAgent.match(/Android/i)) {
    return true;
  }
  if (navigator.userAgent.match(/webOS/i)) {
    return true;
  }
  if (navigator.userAgent.match(/iPhone/i)) {
    return true;
  }
  if (navigator.userAgent.match(/iPad/i)) {
    return true;
  }
  if (navigator.userAgent.match(/iPod/i)) {
    return true;
  }
  if (navigator.userAgent.match(/BlackBerry/i)) {
    return true;
  }
  return navigator.userAgent.match(/Windows Phone/i);
};

BrowserDetect = {
  init: function() {
    this.browser = this.searchString(this.dataBrowser) || "An unknown browser";
    this.version = this.searchVersion(navigator.userAgent) || this.searchVersion(navigator.appVersion) || "an unknown version";
    return this.OS = this.searchString(this.dataOS) || "an unknown OS";
  },
  searchString: function(data) {
    var dataProp, dataString, i;
    i = 0;
    while (i < data.length) {
      dataString = data[i].string;
      dataProp = data[i].prop;
      this.versionSearchString = data[i].versionSearch || data[i].identity;
      if (dataString) {
        if (dataString.indexOf(data[i].subString) !== -1) {
          return data[i].identity;
        }
      } else {
        if (dataProp) {
          return data[i].identity;
        }
      }
      i += 1;
    }
  },
  searchVersion: function(dataString) {
    var index;
    index = dataString.indexOf(this.versionSearchString);
    if (index === -1) {
      return;
    }
    return parseFloat(dataString.substring(index + this.versionSearchString.length + 1));
  },
  dataBrowser: [
    {
      string: navigator.userAgent,
      subString: "Chrome",
      identity: "Chrome"
    }, {
      string: navigator.userAgent,
      subString: "OmniWeb",
      versionSearch: "OmniWeb/",
      identity: "OmniWeb"
    }, {
      string: navigator.vendor,
      subString: "Apple",
      identity: "Safari",
      versionSearch: "Version"
    }, {
      prop: window.opera,
      identity: "Opera",
      versionSearch: "Version"
    }, {
      string: navigator.vendor,
      subString: "iCab",
      identity: "iCab"
    }, {
      string: navigator.vendor,
      subString: "KDE",
      identity: "Konqueror"
    }, {
      string: navigator.userAgent,
      subString: "Firefox",
      identity: "Firefox"
    }, {
      string: navigator.vendor,
      subString: "Camino",
      identity: "Camino"
    }, {
      string: navigator.userAgent,
      subString: "Netscape",
      identity: "Netscape"
    }, {
      string: navigator.userAgent,
      subString: "MSIE",
      identity: "Explorer",
      versionSearch: "MSIE"
    }, {
      string: navigator.userAgent,
      subString: "Gecko",
      identity: "Mozilla",
      versionSearch: "rv"
    }, {
      string: navigator.userAgent,
      subString: "Mozilla",
      identity: "Netscape",
      versionSearch: "Mozilla"
    }
  ],
  dataOS: [
    {
      string: navigator.platform,
      subString: "Win",
      identity: "Windows"
    }, {
      string: navigator.platform,
      subString: "Mac",
      identity: "Mac"
    }, {
      string: navigator.userAgent,
      subString: "iPhone",
      identity: "iPhone/iPod"
    }, {
      string: navigator.platform,
      subString: "Linux",
      identity: "Linux"
    }
  ]
};

bool_parse = function(bs) {
  if (bs === "true") {
    return true;
  } else if (bs === "false") {
    return false;
  } else {
    return bs;
  }
};

emit_event = function(msg, scope, event) {
  scope.$emit(event);
  return scope.$broadcast(event);
};

init_cryptobox = (function(_this) {
  return function(cryptobox, utils, serverclock, memory, clientcookies) {
    print("app_basic.cf:1029", "init cryptobox");
    memory.set("g_first_tree_render", true);
    cryptobox.init();
    utils.uinit();
    serverclock.init();
    return clientcookies.get("c_persist_html5mode");
  };
})(this);

once_cb_init = _.once(init_cryptobox);

angular.module("cryptoboxApp.base", []).factory("memory", [
  "$q", function($q) {
    var _set;
    window.globals = {};
    _set = function(key, value) {
      var error;
      if (key.indexOf("cvar_") === 0) {
        key = key.replace("cvar_", "g_cvar_");
      }
      if (key.indexOf("c_") === 0) {
        key = key.replace("c_", "g_c_");
      }
      if (key.indexOf("g_") === 0) {
        window.globals[key] = value;
        return;
      }
      error = "memory._set you have to supply a key starting with g_, c_, or cvar_, key was: " + key;
      return warning("app_basic.cf:1057", error);
    };
    return {
      get_debug_mode: function() {
        var g_debugmode;
        g_debugmode = this.get("g_debugmode");
        if (!exist(g_debugmode)) {
          return false;
        }
        return g_debugmode;
      },
      debug_mode: function() {
        return this.get_debug_mode();
      },
      debug: function() {
        return this.get_debug_mode();
      },
      set_debug_mode: function(b) {
        return this.set("g_debugmode", b);
      },
      debug_on: function() {
        return this.set("g_debugmode", true);
      },
      debug_off: function() {
        return this.set("g_debugmode", false);
      },
      set: function(key, value) {
        if (!exist(key)) {
          warning("app_basic.cf:1083", "no key given");
        }
        if (key.indexOf("g_ls_") === 0) {
          if (exist(localStorage)) {
            if (!this.has("g_print_once_" + key, true)) {
              print("app_basic.cf:1088", "set localstorage", key);
              this.set("g_print_once_" + key, true);
            }
            localStorage[key] = value;
          }
        }
        if (key.indexOf("g_f_") === 0) {
          if (_.size(_.filter(_.keys(window.globals), function(k) {
            return strcmp(k, key);
          })) > 0) {
            if (!string_contains(document.location.pathname, "context.html")) {
              warning("app_basic.cf:1096", key, "already exist as functional value");
            }
            if (string_contains(document.location.pathname, "context.html")) {
              throw "already exist";
            }
          }
        }
        if (!exist(value)) {
          value = "";
        }
        _set(key, value);
        return value;
      },
      set_if_higher: function(key, value) {
        var cv;
        cv = this.get(key);
        value = parseFloat(value);
        if (isNaN(value)) {
          throw "not a number";
        }
        if (exist(cv)) {
          if (cv < value) {
            return this.set(key, value);
          }
        } else {
          return this.set(key, value);
        }
      },
      critical_set: function(key, value) {
        if (!exist(key)) {
          warning("app_basic.cf:1122", "no key given");
        }
        if (!exist(value)) {
          throw new Error("critical set undefined value for key " + key);
        }
        return _set(key, value);
      },
      set_no_warning: function(key, value) {
        return _set(key, value);
      },
      all_keys_prefix: function(key_prefix) {
        var check, keys, result;
        keys = _.keys(window.globals);
        check = function(val) {
          var v;
          if (val.indexOf("g_cvar_") === 0) {
            v = val.replace("g_cvar_", "cvar_");
            if (v.indexOf(key_prefix) === 0) {
              return v;
            }
          }
          if (val.indexOf(key_prefix) === 0) {
            return val;
          }
        };
        result = _.filter(_.map(keys, check), function(val) {
          return val != null;
        });
        return result;
      },
      all_vals_prefix: function(key_prefix) {
        var key, result, _i, _len, _ref;
        result = [];
        _ref = this.all_keys_prefix(key_prefix);
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          key = _ref[_i];
          result.push(this.get(key));
        }
        return result;
      },
      prefix: function(kp) {
        return this.all_keys_prefix(kp);
      },
      del_prefix: function(kp) {
        var del_cache;
        del_cache = (function(_this) {
          return function(key) {
            return _this.del(key);
          };
        })(this);
        return _.each(this.all_keys_prefix(kp), del_cache);
      },
      exist: function(key) {
        if (!exist(key)) {
          return false;
        }
        return exist(this.get(key));
      },
      has: function(key) {
        if (!exist(key)) {
          warning("app_basic.cf:1173", "no key given");
        }
        if (key.indexOf("cvar_") === 0) {
          key = key.replace("cvar_", "g_cvar_");
        }
        if (key.indexOf("c_") === 0) {
          key = key.replace("c_", "g_c_");
        }
        return this.exist(key);
      },
      get: function(key) {
        var error, val, value;
        val = null;
        if (!exist(key)) {
          warning("app_basic.cf:1186", "no key given");
        }
        if (key.indexOf("cvar_") === 0) {
          key = key.replace("cvar_", "g_cvar_");
        }
        if (key.indexOf("c_") === 0) {
          key = key.replace("c_", "g_c_");
        }
        if (key.indexOf("g_") === 0) {
          value = window.globals[key];
          val = bool_parse(value);
        }
        if (!exist(val)) {
          if (key.indexOf("g_ls_") === 0) {
            if (exist(localStorage)) {
              print("app_basic.cf:1201", "get localstorage", key);
              if (exist(localStorage[key])) {
                val = localStorage[key];
                window.globals[key] = val;
              }
            }
          }
        }
        if (exist(key)) {
          return val;
        }
        error = "globals g_ ->" + key;
        print("app_basic.cf:1210", error);
        throw error;
      },
      event: function(name, done) {
        var cnt, duration, ec, ek, last_event, lek, runtime;
        if (!exist(done)) {
          done = false;
        }
        ek = "g_event_" + name;
        lek = "g_last_event_" + name;
        ec = "g_event_count_" + name;
        if (this.has(lek)) {
          last_event = this.get(lek);
          if (last_event !== -1) {
            duration = get_local_time() - last_event;
            runtime = this.get(ek);
            runtime += duration;
            this.set(ek, runtime);
          }
        } else {
          this.set(ek, 0);
        }
        if (this.has(ec)) {
          this.increment_counter(ec);
        } else {
          this.counter(ec);
          this.increment_counter(ec);
        }
        if (done) {
          this.set(lek, -1);
          this.decrement_counter(ec);
        } else {
          this.set(lek, get_local_time());
        }
        if (this.get_debug_mode()) {
          if (this.has(ec)) {
            cnt = this.get(ec);
          } else {
            cnt = 0;
          }
          return print("app_basic.cf:1248", "event", cnt, name);
        }
      },
      get_event_duration: function(name) {
        var ec, ek;
        this.event(name, true);
        ec = "g_event_count_" + name;
        ek = "g_event_" + name;
        if (this.has(ek)) {
          return this.get(ek);
        }
        return 0;
      },
      get_event_counter: function(name) {
        var ec;
        ec = "g_event_count_" + name;
        if (this.has(ec)) {
          return this.get(ec);
        }
        return 0;
      },
      get_events: function() {
        var add_event, events;
        events = [];
        add_event = (function(_this) {
          return function(e) {
            var event, key;
            key = _splitlast(e, "g_event_count_");
            event = {};
            event["name"] = key;
            event["count"] = _this.get("g_event_count_" + key);
            event["duration"] = _this.get("g_event_" + key);
            return events.push(event);
          };
        })(this);
        _.each(this.all_keys_prefix("g_event_count_"), add_event);
        return events;
      },
      get_int: function(key) {
        var val;
        val = this.get(key);
        return parseInt(val, 10);
      },
      get_float: function(key) {
        var val;
        val = this.get(key);
        return parseFloat(val);
      },
      set_one_read_value: function(key) {
        _set(key, true);
        return true;
      },
      get_one_read_value: function(key) {
        var val;
        val = this.get(key);
        this.del(key);
        return exist(val);
      },
      get_promise: function(key) {
        var p, val;
        p = $q.defer();
        val = this.get(key);
        if (val == null) {
          p.reject("memory:get_promise no value for key [" + String(key) + "]");
        } else {
          p.resolve(val);
        }
        return p.promise;
      },
      del: function(key) {
        var error;
        if (key.indexOf("cvar_") === 0) {
          key = key.replace("cvar_", "g_cvar_");
        }
        if (key.indexOf("c_") === 0) {
          key = key.replace("c_", "g_c_");
        }
        if (key.indexOf("g_") === 0) {
          delete window.globals[key];
          return;
        }
        error = "globals should start with g_ (global) - " + key;
        print("app_basic.cf:1316", key, "no g_ prefix");
        return warning("app_basic.cf:1317", error);
      },
      reset: function() {
        var cookie_key, keep, key, _i, _len, _ref;
        _ref = _.keys(window.globals);
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          key = _ref[_i];
          keep = false;
          if (key.indexOf("g_service") === 0) {
            print("app_basic.cf:1323", "stopping", key);
            clearInterval(window.globals[key]);
          }
          cookie_key = key;
          if (cookie_key.indexOf("g_c_") === 0) {
            cookie_key = cookie_key.replace("g_c_", "c_");
          }
          if (cookie_key.indexOf("c_") === 0) {
            if (cookie_key.indexOf("c_persist_") === 0) {
              keep = true;
            }
            if (cookie_key.indexOf("c_const_persist_") === 0) {
              keep = true;
            }
          }
          if (key.indexOf("g_persist_") === 0) {
            keep = true;
          }
          if (!keep) {
            this.del(key);
          }
        }
      },
      bool_test: function(key) {
        var val;
        val = this.get(key);
        if (!exist(val)) {
          this.set(key, false);
          val = false;
        }
        if (String(val) !== "true" && String(val) !== "false") {
          throw new Error("not a boolean");
        }
        return exist_truth(val);
      },
      get_bool: function(key) {
        return this.bool_test(key);
      },
      counter: function(key) {
        if (!exist(this.get(key))) {
          return this.set(key, 0);
        }
      },
      counter_create: function(key, val) {
        if (!exist(this.get(key))) {
          this.set(key, 0);
        }
        if (exist(val)) {
          return this.set(key, val);
        }
      },
      reset_counter: function(key) {
        if (!exist(this.get(key))) {
          this.set(key, 0);
        }
        return this.set(key, 0);
      },
      get_counter: function(key) {
        return this.get(key);
      },
      counter_get: function(key) {
        return this.get(key);
      },
      mod_counter: function(key, modulus) {
        var imod, ival, val;
        val = this.get(key);
        ival = parseInt(val, 10);
        imod = parseInt(modulus, 10);
        return (ival % imod) === 0;
      },
      increment_counter: function(key) {
        var val;
        val = this.get(key);
        if (!exist(val)) {
          val = 0;
        }
        val = parseInt(val, 10);
        val = val + 1;
        this.set(key, val);
        return val;
      },
      cnt_up: function(key) {
        return this.increment_counter(key);
      },
      decrement_counter: function(key) {
        var val;
        val = this.get(key);
        val = parseInt(val, 10);
        val = val - 1;
        this.set(key, val);
        return val;
      },
      cnt_down: function(key) {
        return this.decrement_counter(key);
      },
      dict_set: function(key, name, val) {
        var dict;
        if (this.has(key)) {
          dict = this.get(key);
          dict[name] = val;
          this.set(key, dict);
          return _.size(_.keys(dict));
        } else {
          dict = {};
          dict[name] = val;
          this.set(key, dict);
          return 1;
        }
      },
      dict_get_size: function(key) {
        var dict;
        if (this.has(key)) {
          dict = this.get(key);
          return _.size(_.keys(dict));
        } else {
          return 0;
        }
      },
      dict_keys: function(key) {
        var dict;
        if (this.has(key)) {
          dict = this.get(key);
          return _.keys(dict);
        } else {
          return [];
        }
      },
      dict_clear: function(key) {
        var dict;
        dict = {};
        this.set(key, dict);
        return 0;
      },
      dict_has: function(key, name) {
        var dict;
        if (this.has(key)) {
          dict = this.get(key);
          return __indexOf.call(_.keys(dict), name) >= 0;
        } else {
          return false;
        }
      },
      dict_del: function(key, name) {
        var dict;
        if (this.dict_has(key, name)) {
          dict = this.get(key);
          delete dict[name];
          this.set(key, dict);
          return _.size(_.keys(dict));
        } else {
          return 0;
        }
      },
      dict_get_val: function(key, name) {
        var dict;
        if (this.dict_has(key, name)) {
          dict = this.get(key);
          return dict[name];
        } else {
          return null;
        }
      },
      set_del: function(key, val) {
        var exclude_val, list;
        if (this.has(key)) {
          list = this.get(key);
          exclude_val = function(ival) {
            return !(ival === val);
          };
          list = _.filter(list, exclude_val);
          this.set(key, list);
          return _.size(list);
        } else {
          this.set(key, [val]);
          return 1;
        }
      },
      set_set: function(key, val) {
        var list;
        if (this.has(key)) {
          list = this.get(key);
          if (__indexOf.call(list, val) < 0) {
            list.push(val);
            this.set(key, list);
          }
          return _.size(list);
        } else {
          this.set(key, [val]);
          return 1;
        }
      },
      set_clear: function(key) {
        this.set(key, []);
        return 0;
      },
      set_has: function(key, val) {
        var list;
        if (this.has(key)) {
          list = this.get(key);
          return __indexOf.call(list, val) >= 0;
        } else {
          return false;
        }
      },
      set_get_size: function(key) {
        if (this.has(key)) {
          return _.size(this.get(key));
        } else {
          return 0;
        }
      },
      list_del: function(key, val) {
        var exclude_val, list;
        if (this.has(key)) {
          list = this.get(key);
          exclude_val = function(ival) {
            return !(ival === val);
          };
          list = _.filter(list, exclude_val);
          this.set(key, list);
          return _.size(list);
        } else {
          this.set(key, [val]);
          return 1;
        }
      },
      list_set: function(key, val) {
        var list;
        if (this.has(key)) {
          list = this.get(key);
          list.push(val);
          this.set(key, list);
          return _.size(list);
        } else {
          this.set(key, [val]);
          return 1;
        }
      },
      list_get_size: function(key) {
        if (this.has(key)) {
          return _.size(this.get(key));
        } else {
          return 0;
        }
      },
      list_has: function(key, val) {
        var list;
        if (this.has(key)) {
          list = this.get(key);
          return __indexOf.call(list, val) >= 0;
        } else {
          return false;
        }
      },
      list_clear: function(key) {
        this.set(key, []);
        return 0;
      },
      keys: function() {
        return _.keys(window.globals);
      }
    };
  }
]).factory("clientcookies", [
  "memory", "utils", function(memory, utils) {
    var loaded, set_memory, _set;
    loaded = false;
    _set = function(key, value) {
      var error;
      if (key === "c_token") {
        warning("app_basic.cf:1561", "c_token not allowed");
      }
      if (key === "c_username") {
        warning("app_basic.cf:1564", "c_username not allowed");
      }
      if (key.indexOf("c_") === 0) {
        Store.set(key, value);
        return;
      }
      error = "cookies should start with c_";
      print("app_basic.cf:1571", error);
      return warning("app_basic.cf:1572", error);
    };
    set_memory = function(cookie) {
      if (cookie.key.indexOf("c_") === 0) {
        return memory.set(cookie.key, cookie.val);
      }
    };
    return {
      ensure_memory: function() {
        var cookie_data;
        if (!loaded) {
          cookie_data = Store.all();
          _.each(cookie_data, set_memory);
        }
        return loaded = true;
      },
      reset: function() {
        var check_delete;
        check_delete = (function(_this) {
          return function(key) {
            var cookie_key, keep;
            keep = false;
            cookie_key = key;
            if (cookie_key.indexOf("g_c_") === 0) {
              cookie_key = cookie_key.replace("g_c_", "c_");
            }
            if (cookie_key.indexOf("c_") === 0) {
              if (cookie_key.indexOf("c_persist_") === 0) {
                keep = true;
              } else if (cookie_key.indexOf("c_const_persist_") === 0) {
                keep = true;
              }
            }
            if (!keep) {
              return _this.del(cookie_key);
            }
          };
        })(this);
        return _.each(_.keys(window.globals), check_delete);
      },
      del: function(key) {
        memory.del(key);
        return Store.del(key);
      },
      set: function(key, value) {
        if (key.indexOf("c_const_") === 0) {
          if (utils.exist(memory.get(key))) {
            print("app_basic.cf:1611", key + "is const", value, "ignored");
            return;
          }
        }
        memory.set(key, value);
        return _set(key, value);
      },
      set_no_warning: function(key, value) {
        memory.set(key, value);
        return _set(key, value);
      },
      get: function(key) {
        var error, value;
        if (key === "c_token") {
          warning("app_basic.cf:1622", "c_token not allowed");
        }
        if (key === "c_username") {
          warning("app_basic.cf:1625", "c_username not allowed");
        }
        if (key.indexOf("c_") !== 0) {
          error = "cookies should start with c_";
          warning("app_basic.cf:1628", error);
        }
        value = memory.get(key);
        value = bool_parse(value);
        if (value != null) {
          return value;
        }
        value = Store.get(key);
        if (utils.exist(value)) {
          value = bool_parse(value);
          memory.set(key, value);
          return value;
        }
        return null;
      },
      has: function(key) {
        var v;
        v = this.get(key);
        return utils.exist(v);
      }
    };
  }
]).factory("utils", [
  "memory", "dateFilter", "$templateCache", "$q", "$http", "$timeout", function(memory, dateFilter, $templateCache, $q, $http, $timeout) {
    var init, m_browser, m_os, m_version, _count, _file_extension, _get_cryptobox_slug, _ltrim, _print_once, _rtrim, _sha3, _slugify;
    m_browser = null;
    m_os = null;
    m_version = null;
    init = (function(_this) {
      return function() {
        var browser;
        BrowserDetect.init();
        m_browser = BrowserDetect.browser;
        m_version = BrowserDetect.version;
        m_os = BrowserDetect.OS;
        browser = {};
        browser["browser"] = m_browser;
        browser["version"] = m_version;
        browser["os"] = m_os;
        memory.set("g_browser", browser);
        memory.set("g_browser_name", browser.browser);
        memory.set("g_browser_version", m_version);
        memory.set("g_location_origin", window.location.origin);
        if (m_browser === "Chrome") {
          return directive_check_timeout = 250;
        }
      };
    })(this);
    _rtrim = function(str, charlist, cnt) {
      var n, r, re, _i;
      r = str;
      charlist = (!charlist ? " \\s " : (charlist + "").replace(/([\[\]\(\)\.\?\/\*\{\}\+\$\^\:])/g, "\\$1"));
      if (!exist(cnt)) {
        re = new RegExp("[" + charlist + "]+$", "g");
        r = (str + "").replace(re, "");
      } else {
        re = new RegExp("[" + charlist + "]$");
        for (n = _i = 0; 0 <= cnt ? _i < cnt : _i > cnt; n = 0 <= cnt ? ++_i : --_i) {
          r = (r + "").replace(re, "");
        }
      }
      return r;
    };
    _ltrim = function(str, charlist, cnt) {
      var n, r, re, _i;
      r = str;
      charlist = (!charlist ? " \\s " : (charlist + "").replace(/([\[\]\(\)\.\?\/\*\{\}\+\$\^\:])/g, "$1"));
      if (!exist(cnt)) {
        re = new RegExp("^[" + charlist + "]+", "g");
        r = (str + "").replace(re, "");
      } else {
        re = new RegExp("^[" + charlist + "]");
        for (n = _i = 0; 0 <= cnt ? _i < cnt : _i > cnt; n = 0 <= cnt ? ++_i : --_i) {
          r = (r + "").replace(re, "");
        }
      }
      return r;
    };
    _slugify = function(text) {
      var checksafechar, safe_chars, slug;
      safe_chars = ['_', '-', '.', '~', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '-', '__'];
      text = text.toLowerCase();
      text = text.replace(/\s/g, "-");
      while (text.indexOf("__") > 0) {
        text = text.replace("__", "_");
      }
      slug = "";
      checksafechar = function(c) {
        if (__indexOf.call(safe_chars, c) < 0) {
          c = encode_utf8_b64(c);
          c = _rtrim(c, "=").toLowerCase();
        }
        return slug += c;
      };
      _.each(text, checksafechar);
      return slug;
    };
    _sha3 = function() {
      var append_data, data, hashdata;
      data = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      hashdata = "";
      append_data = function(d) {
        hashdata += String(d);
        return hashdata += "+";
      };
      _.each(data, append_data);
      hashdata = _rtrim(hashdata, "+");
      return CryptoJS.SHA3(hashdata).toString();
    };
    _count = function(string, subString, allowOverlapping) {
      var n, pos, step;
      string += "";
      subString += "";
      if (subString.length <= 0) {
        return string.length + 1;
      }
      n = 0;
      pos = 0;
      step = (allowOverlapping ? 1. : subString.length);
      while (true) {
        pos = string.indexOf(subString, pos);
        if (pos >= 0) {
          n++;
          pos += step;
        } else {
          break;
        }
      }
      return n;
    };
    _print_once = function(msg, themsg) {
      if (!memory.has("g_print_once_" + themsg)) {
        memory.set("g_print_once_" + themsg, true);
        return print("app_basic.cf:1748", msg, themsg);
      }
    };
    _get_cryptobox_slug = function() {
      var cryptobox_slug, path_split;
      cryptobox_slug = memory.get("g_cryptobox_slug");
      if (cryptobox_slug) {
        return cryptobox_slug;
      } else {
        path_split = document.location.pathname.split("/");
        cryptobox_slug = path_split[1];
        memory.set("g_cryptobox_slug", cryptobox_slug);
        return cryptobox_slug;
      }
    };
    _file_extension = function(fname) {
      var cnt_points, extension, split_name;
      if (!exist(fname)) {
        return "";
      }
      if (fname.indexOf(".") !== -1) {
        cnt_points = _count(fname, ".");
        while (cnt_points > 1) {
          fname = fname.replace(".", "±");
          cnt_points -= 1;
        }
        split_name = fname.split(".");
        extension = split_name[split_name.length - 1];
        if (extension.indexOf(" ") !== -1) {
          return fname;
        }
        if (_.size(extension) > 0) {
          return String(extension).trim();
        }
      }
      return String(fname).trim();
    };
    return {
      get_version: function() {
        return get_version();
      },
      init_utils: function() {
        return init();
      },
      path_basename: function(path) {
        var b, lastChar;
        b = path;
        lastChar = b.charAt(b.length - 1);
        if (lastChar === "/" || lastChar === "\\") {
          b = b.slice(0, -1);
        }
        b = b.replace(/^.*[\/\\]/g, "");
        return b;
      },
      path_dirname: function(path) {
        path = _ltrim(path, "/");
        path = _rtrim(path, "/");
        path = "/" + path;
        path = path.replace(/\/[^\/]*\/?$/, "");
        if (_.size(path) === 0) {
          path = "/";
        }
        return path;
      },
      path_info: function(path, options) {
        var OPTS, cnt, dirName, have_basename, have_extension, have_filename, i, opt, optName, optTemp, tmp_arr, __getExt;
        OPTS = void 0;
        cnt = void 0;
        dirName = void 0;
        have_basename = void 0;
        have_extension = void 0;
        have_filename = void 0;
        i = void 0;
        opt = void 0;
        optName = void 0;
        optTemp = void 0;
        options = void 0;
        tmp_arr = void 0;
        __getExt = void 0;
        if (!exist(options)) {
          options = 0;
        }
        opt = "";
        optName = "";
        optTemp = 0;
        tmp_arr = {};
        cnt = 0;
        i = 0;
        have_basename = false;
        have_extension = false;
        have_filename = false;
        if (!path) {
          return false;
        }
        if (!options) {
          options = "PATHINFO_ALL";
        }
        OPTS = {
          PATHINFO_DIRNAME: 1,
          PATHINFO_BASENAME: 2,
          PATHINFO_EXTENSION: 4,
          PATHINFO_FILENAME: 8,
          PATHINFO_ALL: 0
        };
        for (optName in OPTS) {
          OPTS.PATHINFO_ALL = OPTS.PATHINFO_ALL | OPTS[optName];
        }
        if (typeof options !== "number") {
          options = [].concat(options);
        }
        i = 0;
        while (i < options.length) {
          if (OPTS[options[i]]) {
            optTemp = optTemp | OPTS[options[i]];
          }
          i++;
        }
        options = optTemp;
        __getExt = function(path) {
          var dotP, str;
          dotP = void 0;
          str = void 0;
          str = path + "";
          dotP = str.lastIndexOf(".") + 1;
          if (!dotP) {
            return false;
          } else {
            if (dotP !== str.length) {
              return str.substr(dotP);
            } else {
              return "";
            }
          }
        };
        if (options & OPTS.PATHINFO_DIRNAME) {
          dirName = path.replace(/\\/g, "/").replace(/\/[^\/]*\/?$/, "");
          tmp_arr.dirname = (dirName === path ? "." : dirName);
        }
        if (options & OPTS.PATHINFO_BASENAME) {
          if (false === have_basename) {
            have_basename = this.path_basename(path);
          }
          tmp_arr.basename = have_basename;
        }
        if (options & OPTS.PATHINFO_EXTENSION) {
          if (false === have_basename) {
            have_basename = this.path_basename(path);
          }
          if (false === have_extension) {
            have_extension = __getExt(have_basename);
          }
          if (false !== have_extension) {
            tmp_arr.extension = have_extension;
          }
        }
        if (options & OPTS.PATHINFO_FILENAME) {
          if (false === have_basename) {
            have_basename = this.path_basename(path);
          }
          if (false === have_extension) {
            have_extension = __getExt(have_basename);
          }
          if (false === have_filename) {
            have_filename = have_basename.slice(0, have_basename.length - (have_extension ? have_extension.length + 1 : (have_extension === false ? 0 : 1)));
          }
          tmp_arr.filename = have_filename;
        }
        if (!exist(tmp_arr.extension)) {
          tmp_arr.extension = "";
        }
        cnt = 0;
        for (opt in tmp_arr) {
          cnt++;
        }
        if (cnt === 1) {
          return tmp_arr[opt];
        }
        return tmp_arr;
      },
      string_contains: function(astring, val) {
        return string_contains(astring, val);
      },
      encode_utf8_b64: function(str) {
        return encode_utf8_b64(str);
      },
      decode_utf8_b64: function(str) {
        return decode_utf8_b64(str);
      },
      print_once: function(msg, themsg) {
        return _print_once(msg, themsg);
      },
      unique_number: function() {
        return unique_number();
      },
      minimime_on_extension: function(name) {
        var extension;
        extension = _file_extension(name);
        switch (extension) {
          case "as":
            return "actionscript";
          case "csv":
            return "excel";
          case "numbers":
            return "excel";
          case "xls":
            return "excel";
          case "docx":
            return "word";
          case "doc":
            return "word";
          case "pptx":
            return "powerpoint";
          case "ppt":
            return "powerpoint";
          case "css":
            return "code";
          case "cs":
            return "cplusplus";
          case "rb":
            return "ruby";
          case "cryptobox":
            return "cryptobox";
          case "vsd":
            return "visio";
          case "vdx":
            return "visio";
          case "mkv":
            return "film";
          case "php":
            return "code";
          case "mp3":
            return "sound";
          case "pkg":
            return "compressed";
          case "dat":
            return "compressed";
          case "md":
            return "text";
          case "pages":
            return "word";
          case "dmg":
            return "compressed";
          case "pdf":
            return "acrobat";
          case "rtfd":
            return "text";
          case "rtf":
            return "text";
          case "c":
            return "c";
          case "cpp":
            return "cplusplus";
          case "java":
            return "code";
          case "js":
            return "js";
          case "txt":
            return "text";
          case "html":
            return "code";
          case "json":
            return "code";
          case "htm":
            return "code";
          case "ico":
            return "image";
          case "eml":
            return "default";
          case "ttf":
            return "gear";
          case "epub":
            return "pages";
          case "mobi":
            return "pages";
          case "chtml":
            return "application";
          default:
            print("app_basic.cf:1989", "unknown mimetype", name);
            return "default";
        }
      },
      get_mini_mime: function(mime, name) {
        switch (mime) {
          case "application/vnd.openxmlformats-officedocument.wordprocessingml.document":
          case "application/msword":
            return "word";
          case "application/pdf":
            return "acrobat";
          case "application/postscript":
            return "vector";
          case "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet":
          case "application/vnd.ms-excel":
          case "application/vnd.oasis.opendocument.spreadsheet":
            return "excel";
          case "application/vnd.openxmlformats-officedocument.presentationml.presentation":
          case "application/vnd.ms-powerpoint":
            return "powerpoint";
          case "image/png":
          case "image/gif":
          case "image/bmp":
          case "image/jpg":
          case "image/jpeg":
          case "image/vnd.adobe.photoshop":
          case "image/x-ms-bmp":
          case "image/x-photoshop":
          case "image/x-icon":
            return "picture";
          case "application/visio":
          case "application/x-visio":
          case "application/vnd.visio":
          case "application/visio.drawing":
          case "application/vsd":
          case "application/x-vsd":
          case "image/x-vsd":
          case "zz-application/zz-winassoc-vsd":
            return "visio";
          case "audio/mpeg":
            return "sound";
          case "application/bin":
          case "application/binary":
          case "application/com":
          case "application/dos-exe":
          case "application/exe":
          case "application/macbinary":
          case "application/msdos-windows":
          case "application/octet-stream":
          case "application/x-com":
          case "application/x-exe":
          case "application/x-macbinary":
          case "application/x-msdos-program":
          case "application/x-stuffit":
          case "application/x-tencore":
          case "application/x-winexe":
          case "application/x-zip-compressed":
          case "vms/exe":
          case "application/x-msdownload":
            return "application";
          case "application/zip":
          case "application/x-tar":
            return "compressed";
          case "folder":
            return "folder";
          case "text/x-python":
            return "code";
          case "application/javascript":
            return "js";
          case "text/x-java-source":
          case "text/x-java":
            return "code";
          case "text/x-c":
          case "text/x-csrc":
          case "text/x-c++src":
            if (name.indexOf(".cpp") > 0) {
              return "cplusplus";
            } else {
              return "c";
            }
            break;
          case "application/rtf":
            return "word";
          case "text/plain":
            if (name.indexOf(".note") > 0) {
              return "note";
            } else {
              return "text";
            }
            break;
          default:
            if (exist(mime)) {
              if (mime.indexOf("video/") > -1) {
                return "film";
              }
            }
        }
        return this.minimime_on_extension(name);
      },
      match_mime_small_icon: function(mini_mime) {
        return "/st/img/icon-" + mini_mime + ".png";
      },
      match_mime_large_icon: function(mini_mime) {
        switch (mini_mime) {
          case "acrobat":
          case "actionscript":
          case "c":
          case "cplusplus":
          case "code":
          case "ruby":
          case "java":
          case "vector":
          case "compressed":
          case "powerpoint":
          case "text":
          case "word":
          case "excel":
          case "picture":
          case "note":
          case "film":
            return "/st/img/icon-" + mini_mime + "@4x.png";
          default:
            return "/st/img/icon-default@4x.png";
        }
      },
      get_local_time: function() {
        return get_local_time();
      },
      uinit: function() {
        return init();
      },
      reg_test: function(data, expr) {
        var patt;
        patt = new RegExp(expr);
        return patt.test(data);
      },
      chrome: function() {
        return m_browser === "Chrome";
      },
      replace_all: function(str, v1, v2) {
        return g_replace_all(str, v1, v2);
      },
      ie8: function() {
        if (m_browser === "Explorer") {
          if (parseInt(m_version, 10) === 8) {
            return true;
          }
        }
        return false;
      },
      html5: function() {
        var v;
        v = memory.get("g_c_persist_html5mode");
        return bool_parse(v);
      },
      split: function(str, splitter) {
        var s, sp;
        s = String(str);
        sp = s.split(splitter);
        return sp;
      },
      splitlast: function(str, splitter) {
        return _splitlast(str, splitter);
      },
      bool_parse: function(v) {
        return bool_parse(v);
      },
      text_html: function(str) {
        str = str.trim();
        return String(str).replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/\n/g, "<br/>").replace(/\ /g, "&nbsp;").replace(/\t/g, "&nbsp;&nbsp;&nbsp;&nbsp;");
      },
      percentage: function(current, range) {
        var perc;
        current = parseFloat(current);
        range = parseFloat(range);
        perc = current / (range / 100);
        if (range === 0) {
          return 0;
        }
        if (perc > 100) {
          perc = 100;
        }
        if (isNaN(perc)) {
          return 0;
        }
        return parseInt(perc, 10);
      },
      full: function(arr) {
        return _.size(arr) > 0;
      },
      empty: function(arr) {
        return _.size(arr) === 0;
      },
      exclude: function(source, excludes, keys) {
        var check_keys, citem, ck, excludes2, found, item, item1obj, item2, item2obj, k1, k2, list_of_forbidden_keyvalues, list_of_seen_keys, new_array, obj, only_check_on, recurse_objects, _i, _j, _k, _l, _len, _len1, _len10, _len2, _len3, _len4, _len5, _len6, _len7, _len8, _len9, _m, _n, _o, _p, _q, _r, _ref, _ref1, _ref2, _ref3, _ref4, _s;
        if (!_.isArray(source)) {
          print("app_basic.cf:2125", source);
          throw "exclude source must be an array";
        }
        if (!exist(excludes)) {
          if (excludes == null) {
            excludes = source;
          }
        }
        if (!_.isArray(excludes)) {
          throw "exclude exclude must be an array";
        } else {
          if (_.size(excludes) === 0) {
            return source;
          }
        }
        check_keys = [];
        only_check_on = [];
        new_array = [];
        list_of_forbidden_keyvalues = {};
        if (exist(keys)) {
          if (_.isArray(keys)) {
            for (_i = 0, _len = keys.length; _i < _len; _i++) {
              citem = keys[_i];
              if (_.isObject(citem)) {
                _ref = _.keys(citem);
                for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
                  ck = _ref[_j];
                  check_keys.push({
                    'k': ck,
                    'v': citem[ck]
                  });
                }
              } else {
                check_keys.push({
                  'k': citem,
                  'v': null
                });
                if (!exist(list_of_forbidden_keyvalues[citem])) {
                  excludes2 = [];
                  for (_k = 0, _len2 = excludes.length; _k < _len2; _k++) {
                    item = excludes[_k];
                    if (!_.isObject(item)) {
                      item2 = {};
                      for (_l = 0, _len3 = check_keys.length; _l < _len3; _l++) {
                        ck = check_keys[_l];
                        item2[ck.k] = item;
                      }
                      item = item2;
                    }
                    excludes2.push(item);
                  }
                  r_retrieve_kvs(excludes2, list_of_forbidden_keyvalues);
                }
              }
            }
          }
        }
        citem = null;
        if (exist(check_keys)) {
          list_of_seen_keys = {};
          recurse_objects = function(obj, found) {
            var k, obj2, seenvalue, _len4, _len5, _m, _n, _ref1, _results;
            if (!_.isObject(obj)) {
              obj2 = {};
              for (_m = 0, _len4 = check_keys.length; _m < _len4; _m++) {
                ck = check_keys[_m];
                obj2[ck.k] = obj;
              }
              obj = obj2;
            }
            if (_.isObject(obj)) {
              _ref1 = _.keys(obj);
              _results = [];
              for (_n = 0, _len5 = _ref1.length; _n < _len5; _n++) {
                k = _ref1[_n];
                if (_.isObject(obj[k])) {
                  _results.push(recurse_objects(obj[k], found));
                } else {
                  _results.push((function() {
                    var _len6, _o, _results1;
                    _results1 = [];
                    for (_o = 0, _len6 = check_keys.length; _o < _len6; _o++) {
                      citem = check_keys[_o];
                      if (strcmp(citem.k, k)) {
                        if (!exist(citem.v)) {
                          _results1.push((function() {
                            var _len7, _p, _ref2, _results2;
                            _ref2 = list_of_forbidden_keyvalues[k];
                            _results2 = [];
                            for (_p = 0, _len7 = _ref2.length; _p < _len7; _p++) {
                              seenvalue = _ref2[_p];
                              if (strcmp(obj[k], seenvalue)) {
                                _results2.push(found[0] = true);
                              } else {
                                _results2.push(void 0);
                              }
                            }
                            return _results2;
                          })());
                        } else {
                          if (strcmp(citem.v, obj[k])) {
                            _results1.push(found[0] = true);
                          } else {
                            _results1.push(void 0);
                          }
                        }
                      } else {
                        _results1.push(void 0);
                      }
                    }
                    return _results1;
                  })());
                }
              }
              return _results;
            }
          };
          for (_m = 0, _len4 = source.length; _m < _len4; _m++) {
            obj = source[_m];
            found = [false];
            recurse_objects(obj, found);
            if (!found[0]) {
              new_array.push(obj);
            }
          }
        } else {
          for (_n = 0, _len5 = source.length; _n < _len5; _n++) {
            item = source[_n];
            item1obj = _.isObject(item);
            found = false;
            for (_o = 0, _len6 = excludes.length; _o < _len6; _o++) {
              item2 = excludes[_o];
              item2obj = _.isObject(item2);
              if (item1obj && item2obj) {
                _ref1 = _.keys(item);
                for (_p = 0, _len7 = _ref1.length; _p < _len7; _p++) {
                  k1 = _ref1[_p];
                  _ref2 = _.keys(item2);
                  for (_q = 0, _len8 = _ref2.length; _q < _len8; _q++) {
                    k2 = _ref2[_q];
                    found = strcmp(item[k1], item2[k1]) && strcmp(item[k2], item2[k2]);
                    if (found) {
                      break;
                    }
                  }
                }
              } else if (item1obj && !item2obj) {
                _ref3 = _.keys(item);
                for (_r = 0, _len9 = _ref3.length; _r < _len9; _r++) {
                  k1 = _ref3[_r];
                  found = strcmp(item[k1], item2);
                  if (found) {
                    break;
                  }
                }
              } else if (!item1obj && item2obj) {
                _ref4 = _.keys(item2);
                for (_s = 0, _len10 = _ref4.length; _s < _len10; _s++) {
                  k2 = _ref4[_s];
                  found = strcmp(item, item2[k2]);
                  if (found) {
                    break;
                  }
                }
              } else if (!item1obj && !item2obj) {
                found = strcmp(item, item2);
                if (found) {
                  break;
                }
              }
              if (found) {
                break;
              }
            }
            if (!found) {
              new_array.push(item);
            }
          }
        }
        return new_array;
      },
      filter_key_value: function(source, key, value) {
        var check, new_array;
        new_array = [];
        check = (function(_this) {
          return function(item) {
            var found, tmp;
            found = false;
            if (_.isObject(item)) {
              tmp = _this.filter_key_value(item, key, value);
              if (_.size(tmp) > 0) {
                found = true;
              }
            }
            if (item != null) {
              if (String(item[key]) === String(value)) {
                found = true;
              }
            }
            if (found) {
              return new_array.push(item);
            }
          };
        })(this);
        _.each(source, check);
        return new_array;
      },
      map_to_values: function(source, key) {
        var check, new_array;
        new_array = [];
        check = (function(_this) {
          return function(item) {
            if (_.isObject(item[key])) {
              return print("app_basic.cf:2269", _this.map_to_values(item, key));
            } else {
              if (exist(item[[key]])) {
                return new_array.push(item[key]);
              }
            }
          };
        })(this);
        _.each(source, check);
        return new_array;
      },
      unique_object_list: function(source, key) {
        var make_unique, new_array;
        new_array = [];
        make_unique = function(item) {
          var check, found;
          found = false;
          check = function(item2) {
            if (item2[key] === item[key]) {
              return found = true;
            }
          };
          _.each(new_array, check);
          if (!found) {
            return new_array.push(item);
          }
        };
        _.each(source, make_unique);
        return new_array;
      },
      list_contains: function(alist, val) {
        return list_contains(alist, val)[0];
      },
      list_retrieve: function(alist, val) {
        return list_contains(alist, val)[1];
      },
      unique_list: function(source) {
        var make_unique, new_array;
        new_array = [];
        make_unique = function(item) {
          var check, found;
          found = false;
          check = function(item2) {
            if (item2 === item) {
              return found = true;
            }
          };
          _.each(new_array, check);
          if (!found) {
            return new_array.push(item);
          }
        };
        _.each(source, make_unique);
        return new_array;
      },
      slugify: function(text) {
        return _slugify(text);
      },
      slugify_path: function(path) {
        var makepath, pathsplit, slugpath;
        pathsplit = path.split("/");
        pathsplit = _.map(pathsplit, _slugify);
        slugpath = "";
        makepath = function(item) {
          return slugpath += "/" + item;
        };
        _.each(pathsplit, makepath);
        slugpath = _ltrim(slugpath, "/", 1);
        return slugpath;
      },
      obj2json: function(obj) {
        return JSON.stringify(obj);
      },
      json2obj: function(json) {
        return JSON.parse(json);
      },
      obj2b64: function(obj) {
        return this.b64_encode_safe(this.obj2json(obj));
      },
      b642obj: function(b64) {
        if (!String(b64).contains("b64:safe")) {
          warning("app_basic.cf:2340", "b642obj");
          return b64;
        }
        return this.json2obj(this.b64_decode_safe(b64));
      },
      same_object: function(obj1, obj2) {
        var j1, j2;
        j1 = this.obj2json(obj1);
        j2 = this.obj2json(obj2);
        return j1 === j2;
      },
      strcmp: function(s1, s2) {
        return strcmp(s1, s2);
      },
      b64_encode_safe: function(s) {
        return b64_encode_safe(s);
      },
      b64_decode_safe: function(s) {
        return b64_decode_safe(s);
      },
      object_b64_safe: function(v) {
        return object_b64_safe(v);
      },
      b64_object_safe: function(v) {
        return b64_object_safe(v);
      },
      b64_uri: function(s) {
        return b64_uri(s);
      },
      asciistring: function(s) {
        return asciistring(s);
      },
      asciistring_no_specials: function(s) {
        return asciistring_no_specials(s);
      },
      asciistring_lowercase: function(s) {
        return asciistring_lowercase(s);
      },
      format_file_size: function(mybytes) {
        return g_format_file_size(mybytes);
      },
      browser: function() {
        if (!this.exist(m_browser)) {
          init();
        }
        return m_browser;
      },
      is_phone: function() {
        if (memory.has("g_device_type")) {
          if (memory.get("g_device_type") === "phone") {
            return true;
          }
        }
        return false;
      },
      is_tablet: function() {
        if (memory.has("g_device_type")) {
          if (memory.get("g_device_type") === "tablet") {
            return true;
          }
        }
        return false;
      },
      is_desktop: function() {
        if (memory.has("g_device_type")) {
          if (memory.get("g_device_type") === "desktop") {
            return true;
          }
        }
        return false;
      },
      version: function() {
        if (!this.exist(m_version)) {
          init();
        }
        return m_version;
      },
      os: function() {
        if (!this.exist(m_os)) {
          init();
        }
        return m_os;
      },
      mail_admins: function(subject, message) {
        var command, data, p, url;
        p = $q.defer();
        data = {};
        data["subject"] = subject;
        data["message"] = message;
        command = "mailadmins";
        url = "/" + this.get_cryptobox_slug() + "/" + command + "/" + get_local_time();
        data = object_b64_safe(data);
        $http.post(url, data).then(function() {
          return p.resolve();
        }, function(e) {
          print("app_basic.cf:2431", "error mailing admins");
          print("app_basic.cf:2432", e);
          return p.resolve();
        });
        return p.promise;
      },
      warning: function() {
        var add_error, add_errors, msg, others, spaces, warning_str, warnings;
        msg = arguments[0], others = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        warnings = [];
        warnings.push(msg);
        add_error = function(i) {
          return warnings.push(String(i));
        };
        _.each(others, add_error);
        warning("app_basic.cf:2445", msg, others);
        warning_str = "";
        spaces = "";
        add_errors = function(i) {
          warning_str += spaces + i + "\n";
          return spaces += "  ";
        };
        _.each(warnings, add_errors);
        return this.mail_admins(this.get_cryptobox_slug() + " - javascript error", warning_str);
      },
      digest: function() {
        return memory.critical_set("g_digest_requested", true);
      },
      force_digest: function(scope) {
        var digest;
        if (!exist(scope)) {
          warning("app_basic.cf:2460", "force_digest needs a scope parameter");
        }
        digest = function() {
          if (!scope.$$phase) {
            return scope.$apply();
          }
        };
        return _.defer(digest);
      },
      sanitize_url: function(url) {
        url = "/" + url;
        while (url.indexOf("//") !== -1) {
          url = url.replace("//", "/");
        }
        return url;
      },
      ltrim: function(str, charlist, max) {
        return _ltrim(str, charlist, max);
      },
      rtrim: function(str, charlist, max) {
        return _rtrim(str, charlist, max);
      },
      trim: function(str, tv) {
        if (!exist(tv)) {
          tv = " ";
        }
        str = _ltrim(str, tv);
        str = _rtrim(str, tv);
        return str;
      },
      capfirst: function(s) {
        return s.charAt(0).toUpperCase() + s.toLowerCase().substring(1);
      },
      numbers_only_string: function(v) {
        var i, s, _i, _len, _ref;
        if (!exist(v)) {
          v = "";
        }
        v = v.trim();
        if (v === "") {
          return v;
        }
        s = "";
        for (_i = 0, _len = v.length; _i < _len; _i++) {
          i = v[_i];
          if (_ref = parseInt(i, 10), __indexOf.call([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], _ref) >= 0) {
            s += i;
          }
        }
        return s;
      },
      count: function(string, subString, allowOverlapping) {
        return _count(string, subString, allowOverlapping);
      },
      cnt_char: function(data, c) {
        return _.size(String(data).split(c)) - 1;
      },
      strip_file_extension: function(fname) {
        var cnt_points, extension, join_name, new_name, ret, split_name;
        if (fname.indexOf(".") !== -1) {
          cnt_points = _count(fname, ".");
          while (cnt_points > 1) {
            fname = fname.replace(".", "±");
            cnt_points -= 1;
          }
          split_name = fname.split(".");
          extension = split_name[split_name.length - 1];
          if (extension.indexOf(" ") !== -1) {
            return String(fname).trim();
          }
          split_name = split_name.slice(0, split_name.length - 1);
          new_name = "";
          join_name = function(i) {
            return new_name += i;
          };
          _.each(split_name, join_name);
          new_name = new_name.replace(/±/g, ".");
          ret = _rtrim(new_name, ".");
          if (ret != null) {
            return ret;
          }
          return "";
        }
        return _rtrim(fname, " ");
      },
      file_extension: function(fname) {
        return _file_extension(fname);
      },
      is_mobile: function() {
        return /Android|webOS|iPhone|iPad|iPod|BlackBerry/i.test(navigator.userAgent);
      },
      title: function(title) {
        return document.title = this.get_cryptobox_slug() + " | " + title.toLowerCase();
      },
      exist_string: function(value) {
        return exist_string(value);
      },
      exist: function(value) {
        return exist(value);
      },
      assert: function(key, value) {
        if (!this.exist(value)) {
          return warning("app_basic.cf:2560", "value named " + key + " does not exist");
        }
      },
      exist_truth: function(value) {
        return exist_truth(value);
      },
      stripTrailingSlash: function(str) {
        while (str.substr(-1) === "/") {
          str = str.substr(0, str.length - 1);
        }
        return str;
      },
      strEndsWith: function(str, suffix) {
        return str.indexOf(suffix, str.length - suffix.length) !== -1;
      },
      get_cryptobox_slug: function() {
        return _get_cryptobox_slug();
      },
      format_date: function(date) {
        return dateFilter(date, 'EEEE d MMMM y');
      },
      format_time: function(date) {
        return dateFilter(date, 'H:mm:ss');
      },
      timestamp: function() {
        return this.format_time(this.get_local_time());
      },
      format_datetime_medium: function(date) {
        return dateFilter(date, 'd MMM y H:mm');
      },
      format_datetime_long: function(datestr) {
        var str;
        str = String(dateFilter(datestr, 'EEEE d MMMM y H:mm:ss'));
        print("app_basic.cf:2591", datestr, str);
        if (str.contains("undefined")) {
          return datestr;
        }
        if (str.contains("1970")) {
          return datestr;
        }
        if (str.contains("NaN")) {
          return datestr;
        } else {
          return str;
        }
      },
      remove_cache: function() {
        if (memory.debug_mode()) {
          return $templateCache.removeAll();
        }
      },
      sha3: function() {
        var append_data, data, hashdata;
        data = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        hashdata = "";
        append_data = function(d) {
          hashdata += String(d);
          return hashdata += "+";
        };
        _.each(data, append_data);
        hashdata = this.rtrim(hashdata, "+");
        return CryptoJS.SHA3(hashdata).toString();
      },
      http_post: function(postslug, data) {
        var p, url;
        postslug = _ltrim(postslug, "/");
        p = $q.defer();
        data = object_b64_safe(data);
        url = "/" + _get_cryptobox_slug() + "/" + postslug + "/" + get_local_time();
        $http.post(url, data).then(function(databack) {
          databack = b64_object_safe(databack);
          return p.resolve(databack.data);
        }, function(errordata) {
          return p.reject(g_http_error(errordata.data));
        });
        data = b64_object_safe(data);
        return p.promise;
      },
      http_get: function(url) {
        var p;
        p = $q.defer();
        $http.get(url).then(function(result) {
          return p.resolve(result.data);
        }, function(e) {
          return p.reject(g_http_error(e.data));
        });
        return p.promise;
      },
      http_get_cached: function(url, cache) {
        var content, p, url_key;
        if (cache == null) {
          cache = true;
        }
        url_key = asciistring_lowercase_nospace(url);
        p = $q.defer();
        content = memory.get("g_http_get_cached_" + url_key);
        if (exist(content)) {
          p.resolve(content);
        } else {
          $http.get(url).then(function(result) {
            if (cache) {
              memory.set("g_http_get_cached_" + url_key, result.data);
            }
            return p.resolve(result.data);
          }, function(e) {
            return p.reject(g_http_error(e.data));
          });
        }
        return p.promise;
      },
      set_time_out: function(msg, func, delay, notify) {
        var func_sha3;
        if (!exist(notify)) {
          notify = true;
        }
        if (notify) {
          func_sha3 = this.sha3(String(func));
          if (!memory.has("g_method_set_time_out" + func_sha3)) {
            memory.counter_create("g_method_set_time_out" + func_sha3);
            memory.set("g_time_out_func_" + func_sha3, msg);
          }
          memory.increment_counter("g_method_set_time_out" + func_sha3);
          if (memory.mod_counter("g_method_set_time_out" + func_sha3, 100)) {
            print("app_basic.cf:2683", memory.get("g_time_out_func_" + func_sha3), "has a set_time_out which is called", memory.get("g_method_set_time_out" + func_sha3), "times");
          }
        }
        return _.delay(func, delay);
      },
      call_until_sentinal_hits_repeats: (function(_this) {
        return function(func, param, delay, sentinels, repeats, terminating_sentinel, max_repeats, success_callback, error_callback) {
          var call_loop, error_called, key_counter, key_counter_sentinel, key_counter_total, last_sentinel_matched, start;
          start = get_local_time();
          if (memory.get_debug_mode()) {
            print("app_basic.cf:2693", "-------------------");
            print("app_basic.cf:2694", "call_until_sentinal_hits_repeats");
            print("app_basic.cf:2695", "delay", delay);
            print("app_basic.cf:2696", "repeats", repeats);
            print("app_basic.cf:2697", "max_repeats", max_repeats);
            print("app_basic.cf:2698", "terminating_sentinel", terminating_sentinel);
            print("app_basic.cf:2699", "sentinels", sentinels);
            print("app_basic.cf:2700", "error_callback", exist(error_callback));
            print("app_basic.cf:2701", "error_callback", exist(error_callback));
            print("app_basic.cf:2702", "-------------------");
          }
          if (!exist(max_repeats)) {
            throw "call_until_sentinal_hits_repeats, max_repeats not set";
          }
          key_counter = "g_call_until_sentinal_hits_repeats" + _sha3(String(func));
          key_counter_total = "g_call_until_sentinal_hits_total_repeats" + _sha3(String(func));
          key_counter_sentinel = "g_call_until_sentinal_hits_sentinel" + _sha3(String(func));
          memory.set(key_counter_sentinel, null);
          memory.counter(key_counter);
          sentinels = _.uniq(sentinels);
          last_sentinel_matched = null;
          error_called = false;
          call_loop = function(param) {
            var check_result, result, w_error_callback;
            check_result = function(result, def) {
              var check_sentinel, stop;
              check_sentinel = function(sentinel) {
                if (result === sentinel) {
                  memory.set(key_counter_sentinel, result);
                  if (!exist(last_sentinel_matched)) {
                    last_sentinel_matched = sentinel;
                  }
                  if (strcmp(last_sentinel_matched, sentinel)) {
                    memory.increment_counter(key_counter);
                  } else {
                    memory.reset_counter(key_counter);
                  }
                  return last_sentinel_matched = sentinel;
                }
              };
              _.each(sentinels, check_sentinel);
              memory.increment_counter(key_counter_total);
              if (repeats > memory.get_int(key_counter)) {
                if (result !== terminating_sentinel) {
                  if (max_repeats > memory.get_int(key_counter_total)) {
                    if (!error_called) {
                      return _.delay(call_loop, delay, param);
                    }
                  } else {
                    if (memory.get_debug_mode()) {
                      print("app_basic.cf:2740", "error max repeats (" + max_repeats + ") hit for " + result);
                    }
                    if (exist(error_callback)) {
                      return error_callback("error: max repeats (" + max_repeats + ") hit for " + result);
                    }
                  }
                } else {
                  stop = get_local_time();
                  if (memory.get_debug_mode()) {
                    print("app_basic.cf:2748", "success, terminating sentinal " + terminating_sentinel + " reached in " + (stop - start) + " ms.");
                  }
                  if (exist(success_callback)) {
                    success_callback("success: terminating sentinal " + terminating_sentinel + " reached in " + (stop - start) + " ms.");
                  }
                }
              } else {
                if (memory.get_debug_mode()) {
                  print("app_basic.cf:2756", "error sentinal " + memory.get(key_counter_sentinel) + " reached " + repeats);
                }
                if (exist(success_callback)) {
                  error_callback("error: sentinal " + memory.get(key_counter_sentinel) + " reached " + repeats);
                }
                memory.del(key_counter);
                memory.del(key_counter_total);
                return memory.del(key_counter_sentinel);
              }
            };
            w_error_callback = null;
            if (exist(error_callback)) {
              w_error_callback = function(ex) {
                error_called = true;
                if (memory.get_debug_mode()) {
                  print("app_basic.cf:2769", "exception encountered " + String(ex));
                }
                return error_callback(ex);
              };
            }
            if (exist(param)) {
              if (exist(w_error_callback)) {
                result = func(param, w_error_callback);
              } else {
                result = func(param);
              }
            } else {
              if (exist(w_error_callback)) {
                result = func(w_error_callback);
              } else {
                result = func();
              }
            }
            if (result.then != null) {
              return result.then(function(deferred_result) {
                return check_result(deferred_result, true);
              }, function(deferred_result_err) {
                return check_result(deferred_result_err);
              });
            } else {
              return check_result(result);
            }
          };
          return call_loop(param);
        };
      })(this),
      set_interval: function(msg, func, delay, descr) {
        if (!exist(descr)) {
          warning("app_basic.cf:2799", "set_interval needs a descr parameter");
        }
        _print_once(msg, "set_interval_" + descr + "_" + delay);
        return setInterval(func, delay);
      }
    };
  }
]).factory("urls", [
  "utils", "memory", "clientcookies", function(utils, memory, clientcookies) {
    var _safe;
    _safe = function(parameter) {
      return safe_b64(parameter);
    };
    return {
      http_error: function(data) {
        return g_http_error(data);
      },
      make_route: function(path) {
        var cryptobox_slug, new_path;
        cryptobox_slug = utils.get_cryptobox_slug();
        if (memory.get("g_c_persist_html5mode")) {
          new_path = "/" + cryptobox_slug + "/" + path;
        } else {
          new_path = "/" + path;
        }
        new_path = new_path.replace(new RegExp("//", "g"), "/");
        return new_path;
      },
      make_absolute_route: function(path) {
        var cryptobox_slug, html5_mode, new_path;
        cryptobox_slug = utils.get_cryptobox_slug();
        if (memory.has("g_c_persist_html5mode")) {
          html5_mode = memory.get("g_c_persist_html5mode");
        } else {
          html5_mode = clientcookies.get("c_html5mode");
        }
        if (html5_mode) {
          new_path = "/" + cryptobox_slug + "/" + path;
        } else {
          new_path = "/" + cryptobox_slug + "#/" + path;
        }
        new_path = new_path.replace(new RegExp("//", "g"), "/");
        return new_path;
      },
      make_relative_route: function(path) {
        var new_path;
        if (clientcookies.get("c_persist_html5mode")) {
          new_path = "/" + path;
        } else {
          new_path = "#/" + path;
        }
        new_path = new_path.replace(new RegExp("//", "g"), "/");
        return new_path;
      },
      force_change_route: function($location, path) {
        var safe_path;
        path = utils.stripTrailingSlash(path);
        safe_path = this.make_route(path);
        if ($location.path() === safe_path) {
          document.location = safe_path;
        }
        return $location.path(safe_path);
      },
      change_route: function($location, path) {
        var safe_path;
        path = utils.stripTrailingSlash(path);
        safe_path = this.make_route(path);
        if ($location.path() !== safe_path) {
          return $location.path(safe_path);
        }
      },
      change_document_location: function(path) {
        var cryptobox_slug_path, safe_path;
        path = utils.stripTrailingSlash(path);
        safe_path = this.make_route(path);
        cryptobox_slug_path = "/" + utils.get_cryptobox_slug();
        if (clientcookies.get("c_html5mode")) {
          if (String(document.location).indexOf(safe_path) < 0) {
            return document.location = safe_path;
          }
        } else {
          if (String(document.location).indexOf(cryptobox_slug_path + "#" + safe_path) < 0) {
            return document.location = cryptobox_slug_path + "#" + safe_path;
          }
        }
      },
      safe: function(parameter) {
        return _safe(parameter);
      },
      command: function(msg, command) {
        var url;
        url = "/" + utils.get_cryptobox_slug() + "/" + command + "/" + get_local_time();
        return url;
      },
      slugcommand: function(slug, command) {
        var url;
        url = "/" + slug + "/" + command + "/" + get_local_time();
        return url;
      },
      postcommand: function(msg, command) {
        var url;
        url = "/" + utils.get_cryptobox_slug() + "/" + command + "/" + get_local_time();
        return url;
      },
      key_value: function(command, key, value) {
        var cryptobox_slug, url;
        get_local_time();
        cryptobox_slug = utils.get_cryptobox_slug();
        if ((cryptobox_slug == null) || cryptobox_slug === "undefined") {
          print("app_basic.cf:2899", "cryptobox slug == undefined");
        }
        url = "/" + cryptobox_slug + "/" + command + "/" + _safe(key) + "/" + _safe(value) + "/" + get_local_time();
        print("app_basic.cf:2901", "urls.key_value", url);
        return url;
      }
    };
  }
]);

//# sourceMappingURL=app_basic.map
