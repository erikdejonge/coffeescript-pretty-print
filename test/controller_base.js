// Generated by CoffeeScript 1.7.0
var SecuredController, default_settings, handle_ex, init_ctrl,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

default_settings = function(scope) {
  scope.docs = false;
  scope.settings = false;
  scope.disclaimer = false;
  return scope;
};

handle_ex = function(method_name, exc, mail) {
  var ret;
  if (mail == null) {
    mail = true;
  }
  ret = "------- error -------\n";
  ret += "method:" + method_name;
  ret += "type:" + exc.type;
  ret += "stack:" + exc.stack;
  ret += "message:" + exc.message;
  ret += "------- end error -------\n\n";
  if (mail) {
    warning("controller_base.cf:18", "mailing exception not implemented");
  }
  warning("controller_base.cf:19", ret);
  return ret;
};

SecuredController = (function() {
  var m_height, m_updating_cvars, m_width;

  function SecuredController() {
    this.authrender = __bind(this.authrender, this);
  }

  m_updating_cvars = false;

  m_width = -1;

  m_height = -1;

  SecuredController.prototype.init = function() {};

  SecuredController.prototype.base_init = function($rootScope, $scope, cvar, authorization, $location, cryptobox, tree, $routeParams, memory, clientcookies, utils, urls, $q, serverclock) {
    var init;
    init = function() {
      return once_cb_init(cryptobox, utils, serverclock, memory, clientcookies);
    };
    _.defer(init);
    $rootScope.html5 = clientcookies.get("c_html5mode");
    $rootScope.html4 = !$rootScope.html5;
    if (!running_local()) {
      return clientcookies.del("c_persist_password_debug");
    }
  };

  SecuredController.prototype.set_logged_minutes = function($scope, cvar, $q) {
    var p;
    p = $q.defer();
    cvar.logontime().then(function(seconds) {
      var hour, mins, minstring, minutes, seconds_string;
      if (seconds === 0) {
        p.resolve("zojuist ingelogd");
      }
      if (seconds > 60 * 60) {
        minutes = Math.floor(seconds / 60);
        hour = Math.floor(minutes / 60);
        mins = minutes - (hour * 60);
        if (mins === 1) {
          seconds_string = "minuut";
        } else {
          seconds_string = "minuten";
        }
        $scope.long_time_login = true;
        return p.resolve(hour + " uur en " + mins + " " + seconds_string);
      } else {
        minutes = Math.floor(seconds / 60);
        seconds = Math.round(seconds - (minutes * 60));
        minstring = "minuut";
        if (minutes !== 1) {
          minstring = "minuten";
        }
        return p.resolve(minutes + " " + minstring + ", " + seconds + " seconden");
      }
    }, function(error) {
      print("controller_base.cf:74", error);
      return p.reject(error);
    });
    return p.promise;
  };

  SecuredController.prototype.render_auth = function() {};

  SecuredController.prototype.prerender = function() {};

  SecuredController.prototype.interval_minute = function() {};

  SecuredController.prototype.interval_second = function() {};

  SecuredController.prototype.interval_fast = function() {};

  SecuredController.prototype.base_interval_second = function($rootScope, $scope, cvar, authorization, $location, cryptobox, tree, $routeParams, memory, clientcookies, utils, urls, $q) {
    return this.set_logged_minutes($scope, cvar, $q).then(function(result) {
      return $scope.logged_minutes = result;
    }, function() {
      return print("controller_base.cf:105");
    });
  };

  SecuredController.prototype.base_interval_minute = function() {};

  SecuredController.prototype.baseprerender = function($rootScope, $scope, cvar, authorization, $location, cryptobox, tree, $routeParams, memory, clientcookies, utils, urls, $q, serverclock) {
    var cryptobox_name, cryptobox_slug;
    $scope.loading_indicator = function() {
      return memory.bool_test("g_loading");
    };
    $scope.ctrl_change_route = function(url) {
      print("controller_base.cf:119", "scope change route", url);
      return urls.change_route($location, url);
    };
    cvar.get("cvar_username").then(function(cvar_username) {
      $scope.username = cvar_username;
      if (cvar_username === "rabshakeh") {
        return $scope.is_rabshakeh = true;
      } else {
        return $scope.is_rabshakeh = false;
      }
    }, function() {
      return warning("controller_base.cf:131", "could not fetch cvar_username");
    });
    cryptobox_name = clientcookies.get("c_persist_cryptobox_name_" + utils.get_cryptobox_slug());
    utils.print_once("controller_base.cf:134", cryptobox_name);
    cryptobox_slug = utils.get_cryptobox_slug();
    if (exist(cryptobox_name) && exist(cryptobox_slug)) {
      $scope.cryptobox_name = cryptobox_name;
      $scope.cryptobox_slug = cryptobox_slug;
    }
    $scope.get_cryptobox_slug = function() {
      return utils.get_cryptobox_slug();
    };
    $scope.get_cryptobox_slug_config = function() {
      return "cryptobox_" + utils.get_cryptobox_slug();
    };
    $scope.docs_add = "/docs/add";
    $scope.docs_home = "/docs";
    $scope.settings_home = "/settings/security";
    $scope.settings_security = "/settings/security";
    $scope.settings_password = "/settings/personal";
    $scope.settings_users = "/settings/users";
    $scope.settings_disk = "/settings/disk";
    $scope.logout_url = "/logout";
    $scope.disclaimer_url = "/disclaimer";
    $scope.privacy_url = "/privacy";
    $scope.veiligheid_url = "/veiligheid";
    $scope.long_time_login = false;
    $scope.get_span_10_12_superuser = function() {
      var obj;
      obj = {};
      obj["span12"] = true;
      return obj;
    };
    $scope.get_cvar = function(cvar_name) {
      return cvar.memget(cvar_name);
    };
    cvar.get("cvar_is_super_user").then(function(cvar_is_super_user) {
      $scope.is_superuser = utils.exist_truth(cvar_is_super_user);
      return $scope.get_span_10_12_superuser = function() {
        var obj;
        obj = {};
        if (cvar_is_super_user) {
          obj["span10"] = true;
        } else {
          obj["span12"] = true;
        }
        return obj;
      };
    }, function(e) {
      return warning("controller_base.cf:183", e);
    });
    $rootScope.show_debug_info = false;
    cvar.get("cvar_show_debug_info").then(function(cvar_show_debug_info) {
      $rootScope.show_debug_info = cvar_show_debug_info;
      return window.cvar_show_debug_info = cvar_show_debug_info;
    }, function(e) {
      return warning("controller_base.cf:192", e);
    });
    $scope.get_logfile = function() {
      var res;
      res = _.map(window.g_logfile, function(i) {
        return i;
      });
      return res.reverse();
    };
    $scope.get_current_server_time = function() {
      return serverclock.get_time();
    };
    $scope.docs_url = function() {
      var g_last_parent_node, g_last_parent_short_id;
      memory.set("g_first_tree_render", true);
      g_last_parent_short_id = memory.get("g_last_parent_short_id");
      g_last_parent_node = memory.get("g_last_parent_node");
      if (g_last_parent_short_id) {
        if (g_last_parent_node.m_nodetype === "file") {
          urls.change_route($location, "/doc/" + g_last_parent_short_id);
        } else {
          urls.change_route($location, "/docs/" + g_last_parent_short_id);
        }
      } else {
        urls.change_route($location, "/docs");
      }
      if (memory.get("g_reload_browser")) {
        return document.location = document.location;
      }
    };
    $scope.on_docs = function() {
      return utils.exist_truth($scope.docs);
    };
    $scope.document_pill_enabled = function() {
      var obj;
      obj = {};
      obj.active = $scope.docs;
      if (!$scope.docs) {
        obj.disabled = !cvar.get_cvar_loaded();
      }
      return obj;
    };
    $scope.instelling_pill_enabled = function() {
      var obj;
      obj = {};
      obj.active = $scope.settings;
      if (!$scope.settings) {
        obj.disabled = !cvar.get_cvar_loaded();
      }
      return obj;
    };
    return $scope.settings_url = function() {
      var g_settings_tab_selected;
      if (utils.ie8()) {
        return urls.change_route($location, "/settings");
      } else {
        g_settings_tab_selected = memory.get("g_settings_tab_selected");
        if (utils.exist(g_settings_tab_selected)) {
          $scope.tab_security = false;
          $scope.tab_password = false;
          $scope.tab_users = false;
          $scope.tab_config = false;
          switch (g_settings_tab_selected) {
            case "personal":
              $scope.tab_security = true;
              return urls.change_route($location, "/settings/security");
            case "password":
              $scope.tab_password = true;
              return urls.change_route($location, "/settings/personal");
            case "users":
              $scope.tab_users = true;
              return urls.change_route($location, "/settings/users");
            case "disk":
              $scope.tab_config = true;
              return urls.change_route($location, "/settings/disk");
            default:
              $scope.tab_security = true;
              return urls.change_route($location, "/settings/security");
          }
        } else {
          return urls.change_route($location, "/settings/security");
        }
      }
    };
  };

  SecuredController.prototype.content_loaded = function() {};

  SecuredController.prototype.authrender = function($rootScope, $scope, cvar, authorization, $location, cryptobox, tree, $routeParams, memory, clientcookies, utils, urls, $q, serverclock, saveobject, uploader) {
    var content_is_loaded, digest_requested, last_resize, on_orientation_change, on_resize, onscroll, set_device_type, set_device_type_once, set_top;
    this.base_init($rootScope, $scope, cvar, authorization, $location, cryptobox, tree, $routeParams, memory, clientcookies, utils, urls, $q, serverclock, saveobject, uploader);
    if (!utils.exist_truth(clientcookies.get("c_persist_user_logged_in_status"))) {
      if (utils.exist($routeParams.doc_id)) {
        clientcookies.set("c_unauth_link", String($location.$$path).replace("/" + cryptobox.slug(), ""));
      }
    }
    $scope.absolute_logout_url = urls.make_absolute_route("/logout");
    memory.critical_set("g_last_click", get_local_time());
    $scope.location_origin = window.location.origin;
    set_device_type = function() {
      var h, new_type, w;
      w = $(window).innerWidth();
      h = $(window).innerHeight();
      if (!utils.exist(w)) {
        return;
      }
      if (!utils.exist(h)) {
        return;
      }
      $rootScope.is_phone = false;
      $rootScope.is_desktop = false;
      $rootScope.is_tablet = false;
      if (m_width !== w) {
        m_width = w;
      }
      if (m_width === w) {
        if (m_height === h) {
          return;
        }
      }
      if (w < 768) {
        new_type = "phone";
        $rootScope.is_phone = true;
      } else if (w >= 768 && w < 980) {
        new_type = "tablet";
        $rootScope.is_tablet = true;
      } else {
        new_type = "desktop";
        $rootScope.is_desktop = true;
      }
      $scope.device_type = new_type;
      if (memory.has("g_device_type")) {
        if (memory.get("g_device_type") !== new_type) {
          print("controller_base.cf:320", "running on");
          print("controller_base.cf:321", "phone", utils.is_phone());
          print("controller_base.cf:322", "tablet", utils.is_tablet());
          print("controller_base.cf:323", "desktop", utils.is_desktop());
        }
      } else {
        print("controller_base.cf:325", "running on", new_type);
      }
      if (memory.has("g_window_width")) {
        if (w !== memory.get("g_window_width")) {
          emit_event("controller_base.cf:329", $scope, "resize_window");
          utils.force_digest($scope);
        }
      }
      memory.set("g_device_type", new_type);
      memory.set("g_window_width", w);
      memory.set("g_window_height", h);
      if (window.devicePixelRatio != null) {
        return clientcookies.set("c_device_pixel_ratio", window.devicePixelRatio);
      }
    };
    set_device_type_once = _.once(set_device_type);
    set_device_type_once();
    last_resize = get_local_time();
    on_resize = function(args) {
      var now;
      now = get_local_time();
      if ((now - last_resize) > 500) {
        last_resize = get_local_time();
        return set_device_type(args.target.innerWidth, args.target.innerHeight);
      }
    };
    $(window).resize(on_resize);
    on_orientation_change = function() {
      return _.defer(on_resize);
    };
    $(window).on('orientationchange', on_orientation_change);
    onscroll = function() {
      return memory.set("g_scrollTop_" + $location.$$path, $(window).scrollTop());
    };
    $(window).scroll(onscroll);
    set_top = function() {
      var scrolltop;
      if (!utils.is_desktop()) {
        if (String(document.location).indexOf("docs") > 0) {
          scrolltop = memory.get("g_scrollTop_" + $location.$$path);
          if (utils.exist(scrolltop)) {
            return $(window).scrollTop(scrolltop);
          }
        }
      }
    };
    async_call(set_top);
    $scope.get_footer_style = function() {
      var obj;
      obj = {};
      if (!$rootScope.chrome_browser) {
        obj["font-family"] = "monospace";
      }
      return obj;
    };
    content_is_loaded = (function(_this) {
      return function() {
        return _this.content_loaded($rootScope, $scope, cvar, authorization, $location, cryptobox, tree, $routeParams, memory, clientcookies, utils, urls, $q, serverclock, saveobject, uploader);
      };
    })(this);
    $scope.$on('$viewContentLoaded', content_is_loaded);
    $rootScope.browser = utils.browser();
    $rootScope.chrome_browser = false;
    $rootScope.ie8_browser = false;
    if (utils.browser() === "Chrome") {
      $rootScope.chrome_browser = true;
    }
    if (utils.ie8()) {
      $rootScope.ie8_browser = true;
    }
    digest_requested = function() {
      if (!$scope.$$phase) {
        return $scope.$apply();
      }
    };
    $scope.$on("digest_request", digest_requested);
    return $q.all([cvar.all(), cvar.get("cvar_username")]).then((function(_this) {
      return function(cvar_username) {
        var delete_service_interval_memory, dragEnterLeave, drop_f, dropzone, f_interval, g_check_droplist_interval, minutestart, now, second_interval, secondstart, service_id, tensecondstart, traverseFileTree;
        $scope.get_upload_progress_bar = function() {
          var perc;
          perc = uploader.get_upload_progress();
          if ($scope.progress > 99) {
            return {
              width: "100%",
              height: "10px;"
            };
          }
          return {
            width: perc + "%",
            height: "10px;"
          };
        };
        $scope.show_upload_progress = function() {
          var upload_progress;
          if ($scope.drop_detected) {
            return true;
          }
          upload_progress = uploader.get_upload_progress();
          if (!utils.exist(upload_progress)) {
            return false;
          }
          return upload_progress || ($rootScope.upload_in_progress > 0);
        };
        $scope.get_upload_progress = function() {
          return parseInt(uploader.get_upload_progress(), 10);
        };
        $scope.droperror_rootlevel = false;
        $scope.drop_detected = false;
        $scope.get_droperror_rootlevel = function() {
          return $scope.droperror_rootlevel;
        };
        $scope.reset_droperror_rootlevel = function() {
          return $scope.droperror_rootlevel = false;
        };
        $scope.reset_dropsuggestion = function() {
          return $scope.dropsuggestion = false;
        };
        $scope.get_dropsuggestion = function() {
          return $scope.dropsuggestion;
        };
        $scope.file_drop_root_warning = false;
        $scope.get_file_drop_root_warning = function() {
          return $scope.file_drop_root_warning;
        };
        $scope.drop_error_occurred = false;
        $scope.get_drop_error_occurred = function() {
          return $scope.drop_error_occurred;
        };
        $scope.reset_drop_error = function() {
          $scope.drop_error_occurred = false;
          return utils.force_digest($scope);
        };
        $scope.drop_error_other_file_occurred = false;
        $scope.get_drop_error_other_file_occurred = function() {
          return $scope.drop_error_other_file_occurred;
        };
        $scope.reset_drop_error_other_file = function() {
          $scope.drop_error_other_file_occurred = false;
          return utils.force_digest($scope);
        };
        $scope.num_selectedFiles = function() {
          return _.size($scope.files_selected_for_upload);
        };
        $scope.remove_file_upload_error = function(uuid) {
          return tree.remove_file_upload_error(uuid);
        };
        memory.counter("g_drop_file_index");
        traverseFileTree = function(item, path) {
          var dirReader, error_read, getfile, read_entries;
          path = path || "";
          if (item.isFile) {
            error_read = function(e) {
              $scope.drop_error = e;
              warning("controller_base.cf:470", "Read file error code", e);
              $scope.drop_error_occurred = true;
              return utils.force_digest($scope);
            };
            getfile = function(file) {
              if (_.size(path) > 0) {
                file.relPath = utils.ltrim(path, "/");
              }
              return uploader.add_to_upload_queue(file);
            };
            return item.file(getfile, error_read);
          } else if (item.isDirectory) {
            dirReader = item.createReader();
            error_read = function(e) {
              $scope.drop_error = e;
              warning("controller_base.cf:486", "Directory FileError code", e);
              $scope.drop_error_occurred = true;
              return utils.force_digest($scope);
            };
            read_entries = function(entries) {
              var i, _results;
              i = 0;
              _results = [];
              while (i < entries.length) {
                traverseFileTree(entries[i], item.fullPath);
                _results.push(i++);
              }
              return _results;
            };
            return dirReader.readEntries(read_entries, error_read);
          }
        };
        $scope.no_drops = false;
        $scope.get_no_drops = function() {
          return $scope.no_drops;
        };
        $scope.reset_no_drops = function() {
          return $scope.no_drops = false;
        };
        drop_f = function(evt) {
          var check_queue_start_download, files, i, item, items, last_check, last_check_cnt, num_items;
          $rootScope.dragover = false;
          utils.force_digest($scope);
          evt.stopPropagation();
          evt.preventDefault();
          if (!utils.chrome() || !utils.exist_truth($scope.current_user.m_is_superuser)) {
            $scope.no_drops = true;
            utils.force_digest($scope);
            return;
          }
          $scope.drop_detected = true;
          items = evt.dataTransfer.items;
          files = evt.dataTransfer.files;
          if (_.size(files) === 0) {
            return;
          }
          i = 0;
          num_items = items.length;
          while (i < num_items) {
            item = items[i].webkitGetAsEntry();
            if (item) {
              traverseFileTree(item, "");
            }
            i++;
          }
          last_check = 0;
          last_check_cnt = 0;
          check_queue_start_download = function() {
            if (uploader.files_selected_for_upload() > 0) {
              print("controller_base.cf:536", "last_check_cnt", last_check_cnt);
              if (uploader.files_selected_for_upload() === last_check) {
                last_check_cnt += 1;
              } else {
                last_check = uploader.files_selected_for_upload();
                last_check_cnt = 0;
                return false;
              }
              if (last_check_cnt > 4) {
                tree.get().then(function(treenodes) {
                  var upload_error, upload_succes;
                  $scope.parent = tree.get_node($routeParams.doc_id, treenodes);
                  upload_succes = function(r) {
                    print("controller_base.cf:550", "upload_succes", r);
                    uploader.reset();
                    tree.invalidate();
                    return emit_event("controller_base.cf:553", $rootScope, "tree_out_of_sync");
                  };
                  upload_error = function(r) {
                    return print("controller_base.cf:556", "upload_error", r);
                  };
                  uploader.upload_start(upload_succes, upload_error);
                  return $scope.drop_detected = false;
                }, function(err) {
                  return print("controller_base.cf:562", err);
                });
                return true;
              }
            }
            return false;
          };
          utils.call_until_sentinal_hits_repeats(check_queue_start_download, null, 500, [false], 20, true, 40);
          return false;
        };
        dropzone = document.getElementById("ng-app");
        memory.set("g_show_upload_area", true);
        dragEnterLeave = function(evt) {
          $rootScope.dragover = false;
          utils.force_digest($scope);
          evt.stopPropagation();
          return evt.preventDefault();
        };
        if (typeof dropzone.addEventListener === "function") {
          dropzone.addEventListener("dragover", function(evt) {
            $rootScope.dragover = true;
            evt.stopPropagation();
            return evt.preventDefault();
          });
        }
        if (typeof dropzone.addEventListener === "function") {
          dropzone.addEventListener("drop", drop_f);
        }
        if (typeof dropzone.addEventListener === "function") {
          dropzone.addEventListener("dragenter", dragEnterLeave, false);
        }
        if (typeof dropzone.addEventListener === "function") {
          dropzone.addEventListener("dragleave", dragEnterLeave, false);
        }
        g_check_droplist_interval = memory.get("g_check_droplist_interval");
        if (g_check_droplist_interval) {
          clearInterval(g_check_droplist_interval);
        }
        $scope.username = cvar_username[1];
        _this.init($rootScope, $scope, cvar, authorization, $location, cryptobox, tree, $routeParams, memory, clientcookies, utils, urls, $q, serverclock, saveobject, uploader);
        if (!utils.exist($rootScope.current_user)) {
          authorization.get_current_user().then(function(user) {
            return $rootScope.current_user = user;
          }, function(error) {
            warning("controller_base.cf:599", error);
          });
        }
        $scope.get_debug_mode = function() {
          return memory.debug_mode();
        };
        cvar.get("cvar_disable_caching").then(function(resolve_result) {
          if (utils.exist_truth(resolve_result)) {
            return utils.remove_cache();
          }
        }, function(error_result) {
          return warning("controller_base.cf:612", "could not fetch cvar_disable_caching", error_result);
        });
        clientcookies.ensure_memory();
        _this.baseprerender($rootScope, $scope, cvar, authorization, $location, cryptobox, tree, $routeParams, memory, clientcookies, utils, urls, $q, serverclock, saveobject, uploader);
        _this.prerender($rootScope, $scope, cvar, authorization, $location, cryptobox, tree, $routeParams, memory, clientcookies, utils, urls, $q, serverclock, saveobject, uploader);
        _this.base_interval_second($rootScope, $scope, cvar, authorization, $location, cryptobox, tree, $routeParams, memory, clientcookies, utils, urls, $q, serverclock, saveobject, uploader);
        _this.interval_second($rootScope, $scope, cvar, authorization, $location, cryptobox, tree, $routeParams, memory, clientcookies, utils, urls, $q, serverclock, saveobject, uploader);
        service_id = "g_service_second_interval_" + get_guid();
        now = get_local_time();
        secondstart = now;
        minutestart = now;
        tensecondstart = now;
        f_interval = function() {
          now = get_local_time();
          _this.interval_fast($rootScope, $scope, cvar, authorization, $location, cryptobox, tree, $routeParams, memory, clientcookies, utils, urls, $q, serverclock, saveobject, uploader);
          if (memory.bool_test("g_digest_requested")) {
            memory.critical_set("g_digest_requested", false);
            if (!$scope.$$phase) {
              $scope.$apply();
            }
          }
          if (parseFloat(now - secondstart) > 1000) {
            secondstart = now;
            _this.base_interval_second($rootScope, $scope, cvar, authorization, $location, cryptobox, tree, $routeParams, memory, clientcookies, utils, urls, $q, serverclock, saveobject, uploader);
            _this.interval_second($rootScope, $scope, cvar, authorization, $location, cryptobox, tree, $routeParams, memory, clientcookies, utils, urls, $q, serverclock, saveobject, uploader);
            memory.increment_counter("g_second_interval");
          }
          if (parseFloat(now - tensecondstart) > (1000 * 10)) {
            tensecondstart = now;
            memory.increment_counter("g_ten_second_interval");
            if (!$scope.$$phase) {
              $scope.$apply();
            }
          }
          if (parseFloat(now - minutestart) > (1000 * 60)) {
            minutestart = now;
            _this.base_interval_minute($rootScope, $scope, cvar, authorization, $location, cryptobox, tree, $routeParams, memory, clientcookies, utils, urls, $q, serverclock, saveobject, uploader);
            _this.interval_minute($rootScope, $scope, cvar, authorization, $location, cryptobox, tree, $routeParams, memory, clientcookies, utils, urls, $q, serverclock, saveobject, uploader);
            if (memory.bool_test("g_cvar_dirty")) {
              cvar.commit_retrieve_all();
              return memory.set("g_cvar_dirty", false);
            }
          }
        };
        if (utils.ie8()) {
          second_interval = utils.set_interval("controller_base.cf:659", f_interval, 1000, "f_interval");
        } else {
          second_interval = utils.set_interval("controller_base.cf:661", f_interval, 250, "f_interval");
        }
        memory.set(service_id, second_interval);
        delete_service_interval_memory = function(service) {
          if ((service !== service_id) && !service.endsWith("_start")) {
            clearInterval(memory.get(service));
            return memory.del(service);
          }
        };
        _.each(memory.all_keys_prefix("g_service_second_interval"), delete_service_interval_memory);
        _this.render_auth($rootScope, $scope, cvar, authorization, $location, cryptobox, tree, $routeParams, memory, clientcookies, utils, urls, $q, serverclock, saveobject, uploader);
        m_updating_cvars = false;
        return _this.set_logged_minutes($scope, cvar, $q).then(function(result) {
          $scope.logged_minutes = result;
          return memory.set("g_prev_logged_minutes", result);
        }, function(e) {
          return warning("controller_base.cf:679", e);
        });
      };
    })(this), function(reject_result) {
      if (reject_result.status === 403) {
        print("controller_base.cf:684", "not authorized, route to login");
        return authorization.to_login();
      } else {
        return print("controller_base.cf:687", "could not load cvars, or not authorized", reject_result);
      }
    });
  };

  return SecuredController;

})();

init_ctrl = function(CtrlClass) {
  var ctrl;
  ctrl = new CtrlClass().authrender;
  ctrl.$inject = ['$rootScope', '$scope', 'cvar', 'authorization', '$location', 'cryptobox', 'tree', '$routeParams', 'memory', 'clientcookies', 'utils', 'urls', '$q', 'serverclock', 'saveobject', 'uploader'];
  return ctrl;
};

//# sourceMappingURL=controller_base.map
